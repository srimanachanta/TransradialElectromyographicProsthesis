
emg_amplifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e6c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08007000  08007000  00017000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007054  08007054  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007054  08007054  00017054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800705c  0800705c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800705c  0800705c  0001705c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007060  08007060  00017060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001484  200000fc  08007160  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001580  08007160  00021580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f3c8  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d3c  00000000  00000000  0002f537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d20  00000000  00000000  00032278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c7  00000000  00000000  00032f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017e81  00000000  00000000  0003395f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001078a  00000000  00000000  0004b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087b6b  00000000  00000000  0005bf6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034e8  00000000  00000000  000e3ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  000e6fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006fe8 	.word	0x08006fe8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08006fe8 	.word	0x08006fe8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fa00 	bl	80008d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f808 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8a6 	bl	800062c <MX_GPIO_Init>
  MX_SPI1_Init();
 80004e0:	f000 f86e 	bl	80005c0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004e4:	f006 f86a 	bl	80065bc <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <main+0x18>
	...

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b094      	sub	sp, #80	; 0x50
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0320 	add.w	r3, r7, #32
 80004f6:	2230      	movs	r2, #48	; 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f006 fd48 	bl	8006f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	2300      	movs	r3, #0
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <SystemClock_Config+0xcc>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000518:	4a27      	ldr	r2, [pc, #156]	; (80005b8 <SystemClock_Config+0xcc>)
 800051a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051e:	6413      	str	r3, [r2, #64]	; 0x40
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <SystemClock_Config+0xcc>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	4b22      	ldr	r3, [pc, #136]	; (80005bc <SystemClock_Config+0xd0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000538:	4a20      	ldr	r2, [pc, #128]	; (80005bc <SystemClock_Config+0xd0>)
 800053a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <SystemClock_Config+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800054c:	2301      	movs	r3, #1
 800054e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000554:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000556:	2302      	movs	r3, #2
 8000558:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800055e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000560:	2304      	movs	r3, #4
 8000562:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000564:	23c0      	movs	r3, #192	; 0xc0
 8000566:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000568:	2306      	movs	r3, #6
 800056a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800056c:	2308      	movs	r3, #8
 800056e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0320 	add.w	r3, r7, #32
 8000574:	4618      	mov	r0, r3
 8000576:	f001 ff59 	bl	800242c <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000580:	f000 f8c4 	bl	800070c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000588:	2302      	movs	r3, #2
 800058a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000594:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2102      	movs	r1, #2
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 f9bb 	bl	800291c <HAL_RCC_ClockConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005ac:	f000 f8ae 	bl	800070c <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3750      	adds	r7, #80	; 0x50
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40007000 	.word	0x40007000

080005c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <MX_SPI1_Init+0x64>)
 80005c6:	4a18      	ldr	r2, [pc, #96]	; (8000628 <MX_SPI1_Init+0x68>)
 80005c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_SPI1_Init+0x64>)
 80005cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_SPI1_Init+0x64>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_SPI1_Init+0x64>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_SPI1_Init+0x64>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_SPI1_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_SPI1_Init+0x64>)
 80005ec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80005f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_SPI1_Init+0x64>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MX_SPI1_Init+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_SPI1_Init+0x64>)
 8000600:	2200      	movs	r2, #0
 8000602:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <MX_SPI1_Init+0x64>)
 8000606:	2200      	movs	r2, #0
 8000608:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_SPI1_Init+0x64>)
 800060c:	220a      	movs	r2, #10
 800060e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_SPI1_Init+0x64>)
 8000612:	f002 fb7b 	bl	8002d0c <HAL_SPI_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800061c:	f000 f876 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000118 	.word	0x20000118
 8000628:	40013000 	.word	0x40013000

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	4b2e      	ldr	r3, [pc, #184]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a2d      	ldr	r2, [pc, #180]	; (8000700 <MX_GPIO_Init+0xd4>)
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0304 	and.w	r3, r3, #4
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	4b27      	ldr	r3, [pc, #156]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a26      	ldr	r2, [pc, #152]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b24      	ldr	r3, [pc, #144]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	4b20      	ldr	r3, [pc, #128]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a1f      	ldr	r2, [pc, #124]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <MX_GPIO_Init+0xd4>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <MX_GPIO_Init+0xd4>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a18      	ldr	r2, [pc, #96]	; (8000700 <MX_GPIO_Init+0xd4>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <MX_GPIO_Init+0xd4>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c0:	2303      	movs	r3, #3
 80006c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006c4:	2305      	movs	r3, #5
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4619      	mov	r1, r3
 80006ce:	480d      	ldr	r0, [pc, #52]	; (8000704 <MX_GPIO_Init+0xd8>)
 80006d0:	f000 faaa 	bl	8000c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80006d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	2302      	movs	r3, #2
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e2:	2303      	movs	r3, #3
 80006e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006e6:	2306      	movs	r3, #6
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_GPIO_Init+0xdc>)
 80006f2:	f000 fa99 	bl	8000c28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f6:	bf00      	nop
 80006f8:	3728      	adds	r7, #40	; 0x28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40020400 	.word	0x40020400
 8000708:	40020000 	.word	0x40020000

0800070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000710:	b672      	cpsid	i
}
 8000712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000714:	e7fe      	b.n	8000714 <Error_Handler+0x8>
	...

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <HAL_MspInit+0x4c>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000726:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <HAL_MspInit+0x4c>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6453      	str	r3, [r2, #68]	; 0x44
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <HAL_MspInit+0x4c>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_MspInit+0x4c>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <HAL_MspInit+0x4c>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_MspInit+0x4c>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a19      	ldr	r2, [pc, #100]	; (80007ec <HAL_SPI_MspInit+0x84>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d12b      	bne.n	80007e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <HAL_SPI_MspInit+0x88>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000792:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <HAL_SPI_MspInit+0x88>)
 8000794:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000798:	6453      	str	r3, [r2, #68]	; 0x44
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <HAL_SPI_MspInit+0x88>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <HAL_SPI_MspInit+0x88>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <HAL_SPI_MspInit+0x88>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <HAL_SPI_MspInit+0x88>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007c2:	23f0      	movs	r3, #240	; 0xf0
 80007c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007d2:	2305      	movs	r3, #5
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <HAL_SPI_MspInit+0x8c>)
 80007de:	f000 fa23 	bl	8000c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007e2:	bf00      	nop
 80007e4:	3728      	adds	r7, #40	; 0x28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40013000 	.word	0x40013000
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020000 	.word	0x40020000

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <NMI_Handler+0x4>

080007fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <HardFault_Handler+0x4>

08000804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <MemManage_Handler+0x4>

0800080a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <BusFault_Handler+0x4>

08000810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <UsageFault_Handler+0x4>

08000816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000844:	f000 f89a 	bl	800097c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <OTG_FS_IRQHandler+0x10>)
 8000852:	f000 fcbd 	bl	80011d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000e54 	.word	0x20000e54

08000860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <SystemInit+0x20>)
 8000866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086a:	4a05      	ldr	r2, [pc, #20]	; (8000880 <SystemInit+0x20>)
 800086c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800088a:	490e      	ldr	r1, [pc, #56]	; (80008c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800088c:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008a0:	4c0b      	ldr	r4, [pc, #44]	; (80008d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008ae:	f7ff ffd7 	bl	8000860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b2:	f006 fb75 	bl	8006fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008b6:	f7ff fe0b 	bl	80004d0 <main>
  bx  lr    
 80008ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80008c8:	08007064 	.word	0x08007064
  ldr r2, =_sbss
 80008cc:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80008d0:	20001580 	.word	0x20001580

080008d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC_IRQHandler>
	...

080008d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_Init+0x40>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <HAL_Init+0x40>)
 80008e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_Init+0x40>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <HAL_Init+0x40>)
 80008ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <HAL_Init+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a07      	ldr	r2, [pc, #28]	; (8000918 <HAL_Init+0x40>)
 80008fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000900:	2003      	movs	r0, #3
 8000902:	f000 f94f 	bl	8000ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000906:	200f      	movs	r0, #15
 8000908:	f000 f808 	bl	800091c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800090c:	f7ff ff04 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023c00 	.word	0x40023c00

0800091c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_InitTick+0x54>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_InitTick+0x58>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000932:	fbb3 f3f1 	udiv	r3, r3, r1
 8000936:	fbb2 f3f3 	udiv	r3, r2, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f967 	bl	8000c0e <HAL_SYSTICK_Config>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	e00e      	b.n	8000968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b0f      	cmp	r3, #15
 800094e:	d80a      	bhi.n	8000966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000950:	2200      	movs	r2, #0
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000958:	f000 f92f 	bl	8000bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800095c:	4a06      	ldr	r2, [pc, #24]	; (8000978 <HAL_InitTick+0x5c>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000962:	2300      	movs	r3, #0
 8000964:	e000      	b.n	8000968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000000 	.word	0x20000000
 8000974:	20000008 	.word	0x20000008
 8000978:	20000004 	.word	0x20000004

0800097c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_IncTick+0x20>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_IncTick+0x24>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <HAL_IncTick+0x24>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000008 	.word	0x20000008
 80009a0:	20000170 	.word	0x20000170

080009a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <HAL_GetTick+0x14>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000170 	.word	0x20000170

080009bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c4:	f7ff ffee 	bl	80009a4 <HAL_GetTick>
 80009c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009d4:	d005      	beq.n	80009e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <HAL_Delay+0x44>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4413      	add	r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009e2:	bf00      	nop
 80009e4:	f7ff ffde 	bl	80009a4 <HAL_GetTick>
 80009e8:	4602      	mov	r2, r0
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d8f7      	bhi.n	80009e4 <HAL_Delay+0x28>
  {
  }
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000008 	.word	0x20000008

08000a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a36:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	60d3      	str	r3, [r2, #12]
}
 8000a3c:	bf00      	nop
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <__NVIC_GetPriorityGrouping+0x18>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	f003 0307 	and.w	r3, r3, #7
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	db0b      	blt.n	8000a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f003 021f 	and.w	r2, r3, #31
 8000a80:	4907      	ldr	r1, [pc, #28]	; (8000aa0 <__NVIC_EnableIRQ+0x38>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	095b      	lsrs	r3, r3, #5
 8000a88:	2001      	movs	r0, #1
 8000a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000e100 	.word	0xe000e100

08000aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db0a      	blt.n	8000ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	490c      	ldr	r1, [pc, #48]	; (8000af0 <__NVIC_SetPriority+0x4c>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	0112      	lsls	r2, r2, #4
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000acc:	e00a      	b.n	8000ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4908      	ldr	r1, [pc, #32]	; (8000af4 <__NVIC_SetPriority+0x50>)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	3b04      	subs	r3, #4
 8000adc:	0112      	lsls	r2, r2, #4
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	761a      	strb	r2, [r3, #24]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b089      	sub	sp, #36	; 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	f1c3 0307 	rsb	r3, r3, #7
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	bf28      	it	cs
 8000b16:	2304      	movcs	r3, #4
 8000b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d902      	bls.n	8000b28 <NVIC_EncodePriority+0x30>
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3b03      	subs	r3, #3
 8000b26:	e000      	b.n	8000b2a <NVIC_EncodePriority+0x32>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43da      	mvns	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	43d9      	mvns	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	4313      	orrs	r3, r2
         );
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3724      	adds	r7, #36	; 0x24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b70:	d301      	bcc.n	8000b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00f      	b.n	8000b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <SysTick_Config+0x40>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7e:	210f      	movs	r1, #15
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b84:	f7ff ff8e 	bl	8000aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SysTick_Config+0x40>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <SysTick_Config+0x40>)
 8000b90:	2207      	movs	r2, #7
 8000b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ff29 	bl	8000a04 <__NVIC_SetPriorityGrouping>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bcc:	f7ff ff3e 	bl	8000a4c <__NVIC_GetPriorityGrouping>
 8000bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	6978      	ldr	r0, [r7, #20]
 8000bd8:	f7ff ff8e 	bl	8000af8 <NVIC_EncodePriority>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff5d 	bl	8000aa4 <__NVIC_SetPriority>
}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff31 	bl	8000a68 <__NVIC_EnableIRQ>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff ffa2 	bl	8000b60 <SysTick_Config>
 8000c1c:	4603      	mov	r3, r0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	e159      	b.n	8000ef8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c44:	2201      	movs	r2, #1
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	f040 8148 	bne.w	8000ef2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d005      	beq.n	8000c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d130      	bne.n	8000cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2203      	movs	r2, #3
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	091b      	lsrs	r3, r3, #4
 8000cc6:	f003 0201 	and.w	r2, r3, #1
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d017      	beq.n	8000d18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d123      	bne.n	8000d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	08da      	lsrs	r2, r3, #3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3208      	adds	r2, #8
 8000d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	691a      	ldr	r2, [r3, #16]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	08da      	lsrs	r2, r3, #3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3208      	adds	r2, #8
 8000d66:	69b9      	ldr	r1, [r7, #24]
 8000d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0203 	and.w	r2, r3, #3
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f000 80a2 	beq.w	8000ef2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b57      	ldr	r3, [pc, #348]	; (8000f10 <HAL_GPIO_Init+0x2e8>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a56      	ldr	r2, [pc, #344]	; (8000f10 <HAL_GPIO_Init+0x2e8>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b54      	ldr	r3, [pc, #336]	; (8000f10 <HAL_GPIO_Init+0x2e8>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dca:	4a52      	ldr	r2, [pc, #328]	; (8000f14 <HAL_GPIO_Init+0x2ec>)
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	220f      	movs	r2, #15
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a49      	ldr	r2, [pc, #292]	; (8000f18 <HAL_GPIO_Init+0x2f0>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d019      	beq.n	8000e2a <HAL_GPIO_Init+0x202>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a48      	ldr	r2, [pc, #288]	; (8000f1c <HAL_GPIO_Init+0x2f4>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d013      	beq.n	8000e26 <HAL_GPIO_Init+0x1fe>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a47      	ldr	r2, [pc, #284]	; (8000f20 <HAL_GPIO_Init+0x2f8>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00d      	beq.n	8000e22 <HAL_GPIO_Init+0x1fa>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a46      	ldr	r2, [pc, #280]	; (8000f24 <HAL_GPIO_Init+0x2fc>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d007      	beq.n	8000e1e <HAL_GPIO_Init+0x1f6>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a45      	ldr	r2, [pc, #276]	; (8000f28 <HAL_GPIO_Init+0x300>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d101      	bne.n	8000e1a <HAL_GPIO_Init+0x1f2>
 8000e16:	2304      	movs	r3, #4
 8000e18:	e008      	b.n	8000e2c <HAL_GPIO_Init+0x204>
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	e006      	b.n	8000e2c <HAL_GPIO_Init+0x204>
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e004      	b.n	8000e2c <HAL_GPIO_Init+0x204>
 8000e22:	2302      	movs	r3, #2
 8000e24:	e002      	b.n	8000e2c <HAL_GPIO_Init+0x204>
 8000e26:	2301      	movs	r3, #1
 8000e28:	e000      	b.n	8000e2c <HAL_GPIO_Init+0x204>
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	69fa      	ldr	r2, [r7, #28]
 8000e2e:	f002 0203 	and.w	r2, r2, #3
 8000e32:	0092      	lsls	r2, r2, #2
 8000e34:	4093      	lsls	r3, r2
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e3c:	4935      	ldr	r1, [pc, #212]	; (8000f14 <HAL_GPIO_Init+0x2ec>)
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	3302      	adds	r3, #2
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4a:	4b38      	ldr	r3, [pc, #224]	; (8000f2c <HAL_GPIO_Init+0x304>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e6e:	4a2f      	ldr	r2, [pc, #188]	; (8000f2c <HAL_GPIO_Init+0x304>)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e74:	4b2d      	ldr	r3, [pc, #180]	; (8000f2c <HAL_GPIO_Init+0x304>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e98:	4a24      	ldr	r2, [pc, #144]	; (8000f2c <HAL_GPIO_Init+0x304>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e9e:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <HAL_GPIO_Init+0x304>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ec2:	4a1a      	ldr	r2, [pc, #104]	; (8000f2c <HAL_GPIO_Init+0x304>)
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <HAL_GPIO_Init+0x304>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eec:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <HAL_GPIO_Init+0x304>)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	61fb      	str	r3, [r7, #28]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	2b0f      	cmp	r3, #15
 8000efc:	f67f aea2 	bls.w	8000c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40013800 	.word	0x40013800
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	40020800 	.word	0x40020800
 8000f24:	40020c00 	.word	0x40020c00
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40013c00 	.word	0x40013c00

08000f30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f32:	b08f      	sub	sp, #60	; 0x3c
 8000f34:	af0a      	add	r7, sp, #40	; 0x28
 8000f36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e10f      	b.n	8001162 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d106      	bne.n	8000f62 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f005 fd0d 	bl	800697c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2203      	movs	r2, #3
 8000f66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d102      	bne.n	8000f7c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f002 f860 	bl	8003046 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	687e      	ldr	r6, [r7, #4]
 8000f8e:	466d      	mov	r5, sp
 8000f90:	f106 0410 	add.w	r4, r6, #16
 8000f94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fa0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fa4:	1d33      	adds	r3, r6, #4
 8000fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fa8:	6838      	ldr	r0, [r7, #0]
 8000faa:	f001 ff38 	bl	8002e1e <USB_CoreInit>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d005      	beq.n	8000fc0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e0d0      	b.n	8001162 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f002 f84e 	bl	8003068 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	e04a      	b.n	8001068 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4413      	add	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	333d      	adds	r3, #61	; 0x3d
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fe6:	7bfa      	ldrb	r2, [r7, #15]
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	4613      	mov	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	4413      	add	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	333c      	adds	r3, #60	; 0x3c
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ffa:	7bfa      	ldrb	r2, [r7, #15]
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	b298      	uxth	r0, r3
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	440b      	add	r3, r1
 800100c:	3344      	adds	r3, #68	; 0x44
 800100e:	4602      	mov	r2, r0
 8001010:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001012:	7bfa      	ldrb	r2, [r7, #15]
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	440b      	add	r3, r1
 8001020:	3340      	adds	r3, #64	; 0x40
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001026:	7bfa      	ldrb	r2, [r7, #15]
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	4613      	mov	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	4413      	add	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	440b      	add	r3, r1
 8001034:	3348      	adds	r3, #72	; 0x48
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	334c      	adds	r3, #76	; 0x4c
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4413      	add	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	3354      	adds	r3, #84	; 0x54
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	3301      	adds	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	429a      	cmp	r2, r3
 8001070:	d3af      	bcc.n	8000fd2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	e044      	b.n	8001102 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	3301      	adds	r3, #1
 8001100:	73fb      	strb	r3, [r7, #15]
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	429a      	cmp	r2, r3
 800110a:	d3b5      	bcc.n	8001078 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	687e      	ldr	r6, [r7, #4]
 8001114:	466d      	mov	r5, sp
 8001116:	f106 0410 	add.w	r4, r6, #16
 800111a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800111c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800111e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001122:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001126:	e885 0003 	stmia.w	r5, {r0, r1}
 800112a:	1d33      	adds	r3, r6, #4
 800112c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800112e:	6838      	ldr	r0, [r7, #0]
 8001130:	f001 ffe6 	bl	8003100 <USB_DevInit>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d005      	beq.n	8001146 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2202      	movs	r2, #2
 800113e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00d      	b.n	8001162 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f003 f935 	bl	80043ca <USB_DevDisconnect>

  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800116a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800117e:	2b01      	cmp	r3, #1
 8001180:	d101      	bne.n	8001186 <HAL_PCD_Start+0x1c>
 8001182:	2302      	movs	r3, #2
 8001184:	e020      	b.n	80011c8 <HAL_PCD_Start+0x5e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001192:	2b01      	cmp	r3, #1
 8001194:	d109      	bne.n	80011aa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800119a:	2b01      	cmp	r3, #1
 800119c:	d005      	beq.n	80011aa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 ff38 	bl	8003024 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f003 f8e5 	bl	8004388 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b08d      	sub	sp, #52	; 0x34
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011de:	6a3b      	ldr	r3, [r7, #32]
 80011e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 f9a3 	bl	8004532 <USB_GetMode>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f040 848a 	bne.w	8001b08 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f003 f907 	bl	800440c <USB_ReadInterrupts>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 8480 	beq.w	8001b06 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	0a1b      	lsrs	r3, r3, #8
 8001210:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f003 f8f4 	bl	800440c <USB_ReadInterrupts>
 8001224:	4603      	mov	r3, r0
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b02      	cmp	r3, #2
 800122c:	d107      	bne.n	800123e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	695a      	ldr	r2, [r3, #20]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f002 0202 	and.w	r2, r2, #2
 800123c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f003 f8e2 	bl	800440c <USB_ReadInterrupts>
 8001248:	4603      	mov	r3, r0
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	2b10      	cmp	r3, #16
 8001250:	d161      	bne.n	8001316 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	699a      	ldr	r2, [r3, #24]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0210 	bic.w	r2, r2, #16
 8001260:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	f003 020f 	and.w	r2, r3, #15
 800126e:	4613      	mov	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4413      	add	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	3304      	adds	r3, #4
 8001280:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	0c5b      	lsrs	r3, r3, #17
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	2b02      	cmp	r3, #2
 800128c:	d124      	bne.n	80012d8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001294:	4013      	ands	r3, r2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d035      	beq.n	8001306 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	6a38      	ldr	r0, [r7, #32]
 80012ae:	f002 ff19 	bl	80040e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	691a      	ldr	r2, [r3, #16]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	091b      	lsrs	r3, r3, #4
 80012ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012be:	441a      	add	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	6a1a      	ldr	r2, [r3, #32]
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012d0:	441a      	add	r2, r3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	621a      	str	r2, [r3, #32]
 80012d6:	e016      	b.n	8001306 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	0c5b      	lsrs	r3, r3, #17
 80012dc:	f003 030f 	and.w	r3, r3, #15
 80012e0:	2b06      	cmp	r3, #6
 80012e2:	d110      	bne.n	8001306 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80012ea:	2208      	movs	r2, #8
 80012ec:	4619      	mov	r1, r3
 80012ee:	6a38      	ldr	r0, [r7, #32]
 80012f0:	f002 fef8 	bl	80040e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	6a1a      	ldr	r2, [r3, #32]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001300:	441a      	add	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	699a      	ldr	r2, [r3, #24]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f042 0210 	orr.w	r2, r2, #16
 8001314:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f003 f876 	bl	800440c <USB_ReadInterrupts>
 8001320:	4603      	mov	r3, r0
 8001322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001326:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800132a:	f040 80a7 	bne.w	800147c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f003 f87b 	bl	8004432 <USB_ReadDevAllOutEpInterrupt>
 800133c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800133e:	e099      	b.n	8001474 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 808e 	beq.w	8001468 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f003 f89f 	bl	800449a <USB_ReadDevOutEPInterrupt>
 800135c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00c      	beq.n	8001382 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	015a      	lsls	r2, r3, #5
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	4413      	add	r3, r2
 8001370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001374:	461a      	mov	r2, r3
 8001376:	2301      	movs	r3, #1
 8001378:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800137a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 fec3 	bl	8002108 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00c      	beq.n	80013a6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	015a      	lsls	r2, r3, #5
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	4413      	add	r3, r2
 8001394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001398:	461a      	mov	r2, r3
 800139a:	2308      	movs	r3, #8
 800139c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800139e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 ff99 	bl	80022d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	015a      	lsls	r2, r3, #5
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	4413      	add	r3, r2
 80013b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013bc:	461a      	mov	r2, r3
 80013be:	2310      	movs	r3, #16
 80013c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d030      	beq.n	800142e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d4:	2b80      	cmp	r3, #128	; 0x80
 80013d6:	d109      	bne.n	80013ec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	69fa      	ldr	r2, [r7, #28]
 80013e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80013ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ee:	4613      	mov	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	3304      	adds	r3, #4
 8001400:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	78db      	ldrb	r3, [r3, #3]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d108      	bne.n	800141c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	2200      	movs	r2, #0
 800140e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	b2db      	uxtb	r3, r3
 8001414:	4619      	mov	r1, r3
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f005 fbac 	bl	8006b74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	015a      	lsls	r2, r3, #5
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	4413      	add	r3, r2
 8001424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001428:	461a      	mov	r2, r3
 800142a:	2302      	movs	r3, #2
 800142c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	f003 0320 	and.w	r3, r3, #32
 8001434:	2b00      	cmp	r3, #0
 8001436:	d008      	beq.n	800144a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	015a      	lsls	r2, r3, #5
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	4413      	add	r3, r2
 8001440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001444:	461a      	mov	r2, r3
 8001446:	2320      	movs	r3, #32
 8001448:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d009      	beq.n	8001468 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	015a      	lsls	r2, r3, #5
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	4413      	add	r3, r2
 800145c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001460:	461a      	mov	r2, r3
 8001462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001466:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	3301      	adds	r3, #1
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800146e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001470:	085b      	lsrs	r3, r3, #1
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001476:	2b00      	cmp	r3, #0
 8001478:	f47f af62 	bne.w	8001340 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f002 ffc3 	bl	800440c <USB_ReadInterrupts>
 8001486:	4603      	mov	r3, r0
 8001488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800148c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001490:	f040 80db 	bne.w	800164a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f002 ffe4 	bl	8004466 <USB_ReadDevAllInEpInterrupt>
 800149e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014a4:	e0cd      	b.n	8001642 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 80c2 	beq.w	8001636 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 f80a 	bl	80044d6 <USB_ReadDevInEPInterrupt>
 80014c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d057      	beq.n	800157e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	f003 030f 	and.w	r3, r3, #15
 80014d4:	2201      	movs	r2, #1
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69f9      	ldr	r1, [r7, #28]
 80014ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80014ee:	4013      	ands	r3, r2
 80014f0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	015a      	lsls	r2, r3, #5
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014fe:	461a      	mov	r2, r3
 8001500:	2301      	movs	r3, #1
 8001502:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d132      	bne.n	8001572 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001510:	4613      	mov	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	334c      	adds	r3, #76	; 0x4c
 800151c:	6819      	ldr	r1, [r3, #0]
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001522:	4613      	mov	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4403      	add	r3, r0
 800152c:	3348      	adds	r3, #72	; 0x48
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4419      	add	r1, r3
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4403      	add	r3, r0
 8001540:	334c      	adds	r3, #76	; 0x4c
 8001542:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	2b00      	cmp	r3, #0
 8001548:	d113      	bne.n	8001572 <HAL_PCD_IRQHandler+0x3a2>
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154e:	4613      	mov	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	3354      	adds	r3, #84	; 0x54
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d108      	bne.n	8001572 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800156a:	461a      	mov	r2, r3
 800156c:	2101      	movs	r1, #1
 800156e:	f003 f811 	bl	8004594 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	b2db      	uxtb	r3, r3
 8001576:	4619      	mov	r1, r3
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f005 fa80 	bl	8006a7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d008      	beq.n	800159a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	015a      	lsls	r2, r3, #5
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	4413      	add	r3, r2
 8001590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001594:	461a      	mov	r2, r3
 8001596:	2308      	movs	r3, #8
 8001598:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	f003 0310 	and.w	r3, r3, #16
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d008      	beq.n	80015b6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	015a      	lsls	r2, r3, #5
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	4413      	add	r3, r2
 80015ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b0:	461a      	mov	r2, r3
 80015b2:	2310      	movs	r3, #16
 80015b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	015a      	lsls	r2, r3, #5
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	4413      	add	r3, r2
 80015c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015cc:	461a      	mov	r2, r3
 80015ce:	2340      	movs	r3, #64	; 0x40
 80015d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d023      	beq.n	8001624 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80015dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015de:	6a38      	ldr	r0, [r7, #32]
 80015e0:	f001 fef2 	bl	80033c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80015e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e6:	4613      	mov	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	3338      	adds	r3, #56	; 0x38
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	3304      	adds	r3, #4
 80015f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	78db      	ldrb	r3, [r3, #3]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d108      	bne.n	8001612 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2200      	movs	r2, #0
 8001604:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4619      	mov	r1, r3
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f005 fac3 	bl	8006b98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	015a      	lsls	r2, r3, #5
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	4413      	add	r3, r2
 800161a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800161e:	461a      	mov	r2, r3
 8001620:	2302      	movs	r3, #2
 8001622:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800162e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 fcdb 	bl	8001fec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	3301      	adds	r3, #1
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163e:	085b      	lsrs	r3, r3, #1
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001644:	2b00      	cmp	r3, #0
 8001646:	f47f af2e 	bne.w	80014a6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f002 fedc 	bl	800440c <USB_ReadInterrupts>
 8001654:	4603      	mov	r3, r0
 8001656:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800165a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800165e:	d122      	bne.n	80016a6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	69fa      	ldr	r2, [r7, #28]
 800166a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800167a:	2b01      	cmp	r3, #1
 800167c:	d108      	bne.n	8001690 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001686:	2100      	movs	r1, #0
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 fec3 	bl	8002414 <HAL_PCDEx_LPM_Callback>
 800168e:	e002      	b.n	8001696 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f005 fa61 	bl	8006b58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	695a      	ldr	r2, [r3, #20]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f002 feae 	bl	800440c <USB_ReadInterrupts>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016ba:	d112      	bne.n	80016e2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d102      	bne.n	80016d2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f005 fa1d 	bl	8006b0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	695a      	ldr	r2, [r3, #20]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016e0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 fe90 	bl	800440c <USB_ReadInterrupts>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016f6:	f040 80b7 	bne.w	8001868 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2110      	movs	r1, #16
 8001714:	4618      	mov	r0, r3
 8001716:	f001 fe57 	bl	80033c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171a:	2300      	movs	r3, #0
 800171c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800171e:	e046      	b.n	80017ae <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001722:	015a      	lsls	r2, r3, #5
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	4413      	add	r3, r2
 8001728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800172c:	461a      	mov	r2, r3
 800172e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001732:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001736:	015a      	lsls	r2, r3, #5
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	4413      	add	r3, r2
 800173c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001744:	0151      	lsls	r1, r2, #5
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	440a      	add	r2, r1
 800174a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800174e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001752:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001756:	015a      	lsls	r2, r3, #5
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	4413      	add	r3, r2
 800175c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001760:	461a      	mov	r2, r3
 8001762:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001766:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176a:	015a      	lsls	r2, r3, #5
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	4413      	add	r3, r2
 8001770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001778:	0151      	lsls	r1, r2, #5
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	440a      	add	r2, r1
 800177e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001782:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001786:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178a:	015a      	lsls	r2, r3, #5
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	4413      	add	r3, r2
 8001790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001798:	0151      	lsls	r1, r2, #5
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	440a      	add	r2, r1
 800179e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017aa:	3301      	adds	r3, #1
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d3b3      	bcc.n	8001720 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017c6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017ca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d016      	beq.n	8001802 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017e4:	f043 030b 	orr.w	r3, r3, #11
 80017e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017fa:	f043 030b 	orr.w	r3, r3, #11
 80017fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001800:	e015      	b.n	800182e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001810:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001814:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001818:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001828:	f043 030b 	orr.w	r3, r3, #11
 800182c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800183c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001840:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001852:	461a      	mov	r2, r3
 8001854:	f002 fe9e 	bl	8004594 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	695a      	ldr	r2, [r3, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001866:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f002 fdcd 	bl	800440c <USB_ReadInterrupts>
 8001872:	4603      	mov	r3, r0
 8001874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800187c:	d124      	bne.n	80018c8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f002 fe63 	bl	800454e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f001 fe18 	bl	80034c2 <USB_GetDevSpeed>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681c      	ldr	r4, [r3, #0]
 800189e:	f001 fa29 	bl	8002cf4 <HAL_RCC_GetHCLKFreq>
 80018a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	461a      	mov	r2, r3
 80018ac:	4620      	mov	r0, r4
 80018ae:	f001 fb17 	bl	8002ee0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f005 f90b 	bl	8006ace <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	695a      	ldr	r2, [r3, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 fd9d 	bl	800440c <USB_ReadInterrupts>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d10a      	bne.n	80018f2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f005 f8e8 	bl	8006ab2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f002 0208 	and.w	r2, r2, #8
 80018f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f002 fd88 	bl	800440c <USB_ReadInterrupts>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001902:	2b80      	cmp	r3, #128	; 0x80
 8001904:	d122      	bne.n	800194c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001912:	2301      	movs	r3, #1
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
 8001916:	e014      	b.n	8001942 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191c:	4613      	mov	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4413      	add	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d105      	bne.n	800193c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	b2db      	uxtb	r3, r3
 8001934:	4619      	mov	r1, r3
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 fb27 	bl	8001f8a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	3301      	adds	r3, #1
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001948:	429a      	cmp	r2, r3
 800194a:	d3e5      	bcc.n	8001918 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f002 fd5b 	bl	800440c <USB_ReadInterrupts>
 8001956:	4603      	mov	r3, r0
 8001958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800195c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001960:	d13b      	bne.n	80019da <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001962:	2301      	movs	r3, #1
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
 8001966:	e02b      	b.n	80019c0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	015a      	lsls	r2, r3, #5
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	4413      	add	r3, r2
 8001970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197c:	4613      	mov	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	3340      	adds	r3, #64	; 0x40
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d115      	bne.n	80019ba <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800198e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001990:	2b00      	cmp	r3, #0
 8001992:	da12      	bge.n	80019ba <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001998:	4613      	mov	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	333f      	adds	r3, #63	; 0x3f
 80019a4:	2201      	movs	r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	4619      	mov	r1, r3
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 fae8 	bl	8001f8a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	3301      	adds	r3, #1
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d3ce      	bcc.n	8001968 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 fd14 	bl	800440c <USB_ReadInterrupts>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019ee:	d155      	bne.n	8001a9c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019f0:	2301      	movs	r3, #1
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
 80019f4:	e045      	b.n	8001a82 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	015a      	lsls	r2, r3, #5
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d12e      	bne.n	8001a7c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a1e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	da2b      	bge.n	8001a7c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001a30:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d121      	bne.n	8001a7c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10a      	bne.n	8001a7c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	69fa      	ldr	r2, [r7, #28]
 8001a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a78:	6053      	str	r3, [r2, #4]
            break;
 8001a7a:	e007      	b.n	8001a8c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	3301      	adds	r3, #1
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d3b4      	bcc.n	80019f6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 fcb3 	bl	800440c <USB_ReadInterrupts>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab0:	d10a      	bne.n	8001ac8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f005 f882 	bl	8006bbc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ac6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 fc9d 	bl	800440c <USB_ReadInterrupts>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d115      	bne.n	8001b08 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f005 f872 	bl	8006bd8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6859      	ldr	r1, [r3, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	e000      	b.n	8001b08 <HAL_PCD_IRQHandler+0x938>
      return;
 8001b06:	bf00      	nop
    }
  }
}
 8001b08:	3734      	adds	r7, #52	; 0x34
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd90      	pop	{r4, r7, pc}

08001b0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	460b      	mov	r3, r1
 8001b18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_PCD_SetAddress+0x1a>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e013      	b.n	8001b50 <HAL_PCD_SetAddress+0x42>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	78fa      	ldrb	r2, [r7, #3]
 8001b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	78fa      	ldrb	r2, [r7, #3]
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f002 fbfb 	bl	800433c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	4608      	mov	r0, r1
 8001b62:	4611      	mov	r1, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	4603      	mov	r3, r0
 8001b68:	70fb      	strb	r3, [r7, #3]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	803b      	strh	r3, [r7, #0]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	da0f      	bge.n	8001b9e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	f003 020f 	and.w	r2, r3, #15
 8001b84:	4613      	mov	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4413      	add	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	3338      	adds	r3, #56	; 0x38
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	3304      	adds	r3, #4
 8001b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	705a      	strb	r2, [r3, #1]
 8001b9c:	e00f      	b.n	8001bbe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	f003 020f 	and.w	r2, r3, #15
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bbe:	78fb      	ldrb	r3, [r7, #3]
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bca:	883a      	ldrh	r2, [r7, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	78ba      	ldrb	r2, [r7, #2]
 8001bd4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	785b      	ldrb	r3, [r3, #1]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d004      	beq.n	8001be8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001be8:	78bb      	ldrb	r3, [r7, #2]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d102      	bne.n	8001bf4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_PCD_EP_Open+0xaa>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e00e      	b.n	8001c20 <HAL_PCD_EP_Open+0xc8>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68f9      	ldr	r1, [r7, #12]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f001 fc7b 	bl	800350c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001c1e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	da0f      	bge.n	8001c5c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	f003 020f 	and.w	r2, r3, #15
 8001c42:	4613      	mov	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	3338      	adds	r3, #56	; 0x38
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	4413      	add	r3, r2
 8001c50:	3304      	adds	r3, #4
 8001c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2201      	movs	r2, #1
 8001c58:	705a      	strb	r2, [r3, #1]
 8001c5a:	e00f      	b.n	8001c7c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	f003 020f 	and.w	r2, r3, #15
 8001c62:	4613      	mov	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	3304      	adds	r3, #4
 8001c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <HAL_PCD_EP_Close+0x6e>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e00e      	b.n	8001cb4 <HAL_PCD_EP_Close+0x8c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68f9      	ldr	r1, [r7, #12]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f001 fcb9 	bl	800361c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ccc:	7afb      	ldrb	r3, [r7, #11]
 8001cce:	f003 020f 	and.w	r2, r3, #15
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cfe:	7afb      	ldrb	r3, [r7, #11]
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d102      	bne.n	8001d18 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d18:	7afb      	ldrb	r3, [r7, #11]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	6979      	ldr	r1, [r7, #20]
 8001d30:	f001 ff98 	bl	8003c64 <USB_EP0StartXfer>
 8001d34:	e008      	b.n	8001d48 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	6979      	ldr	r1, [r7, #20]
 8001d44:	f001 fd46 	bl	80037d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	f003 020f 	and.w	r2, r3, #15
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001d74:	681b      	ldr	r3, [r3, #0]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d92:	7afb      	ldrb	r3, [r7, #11]
 8001d94:	f003 020f 	and.w	r2, r3, #15
 8001d98:	4613      	mov	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	3338      	adds	r3, #56	; 0x38
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4413      	add	r3, r2
 8001da6:	3304      	adds	r3, #4
 8001da8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2200      	movs	r2, #0
 8001dba:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc2:	7afb      	ldrb	r3, [r7, #11]
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d102      	bne.n	8001ddc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ddc:	7afb      	ldrb	r3, [r7, #11]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d109      	bne.n	8001dfa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	6979      	ldr	r1, [r7, #20]
 8001df4:	f001 ff36 	bl	8003c64 <USB_EP0StartXfer>
 8001df8:	e008      	b.n	8001e0c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	6979      	ldr	r1, [r7, #20]
 8001e08:	f001 fce4 	bl	80037d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	f003 020f 	and.w	r2, r3, #15
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d901      	bls.n	8001e34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e050      	b.n	8001ed6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	da0f      	bge.n	8001e5c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	f003 020f 	and.w	r2, r3, #15
 8001e42:	4613      	mov	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	3338      	adds	r3, #56	; 0x38
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	4413      	add	r3, r2
 8001e50:	3304      	adds	r3, #4
 8001e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2201      	movs	r2, #1
 8001e58:	705a      	strb	r2, [r3, #1]
 8001e5a:	e00d      	b.n	8001e78 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3304      	adds	r3, #4
 8001e70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_PCD_EP_SetStall+0x82>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e01e      	b.n	8001ed6 <HAL_PCD_EP_SetStall+0xc0>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68f9      	ldr	r1, [r7, #12]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f002 f974 	bl	8004194 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10a      	bne.n	8001ecc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	b2d9      	uxtb	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	f002 fb64 	bl	8004594 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 020f 	and.w	r2, r3, #15
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d901      	bls.n	8001efc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e042      	b.n	8001f82 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	da0f      	bge.n	8001f24 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	f003 020f 	and.w	r2, r3, #15
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	3338      	adds	r3, #56	; 0x38
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	4413      	add	r3, r2
 8001f18:	3304      	adds	r3, #4
 8001f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	705a      	strb	r2, [r3, #1]
 8001f22:	e00f      	b.n	8001f44 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	f003 020f 	and.w	r2, r3, #15
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_PCD_EP_ClrStall+0x86>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e00e      	b.n	8001f82 <HAL_PCD_EP_ClrStall+0xa4>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68f9      	ldr	r1, [r7, #12]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f002 f97c 	bl	8004270 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	da0c      	bge.n	8001fb8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	f003 020f 	and.w	r2, r3, #15
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	3338      	adds	r3, #56	; 0x38
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	e00c      	b.n	8001fd2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	f003 020f 	and.w	r2, r3, #15
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	3304      	adds	r3, #4
 8001fd0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68f9      	ldr	r1, [r7, #12]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f001 ff9b 	bl	8003f14 <USB_EPStopXfer>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001fe2:	7afb      	ldrb	r3, [r7, #11]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	3338      	adds	r3, #56	; 0x38
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	3304      	adds	r3, #4
 8002012:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a1a      	ldr	r2, [r3, #32]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	429a      	cmp	r2, r3
 800201e:	d901      	bls.n	8002024 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e06c      	b.n	80020fe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	699a      	ldr	r2, [r3, #24]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	429a      	cmp	r2, r3
 8002038:	d902      	bls.n	8002040 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	3303      	adds	r3, #3
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002048:	e02b      	b.n	80020a2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	699a      	ldr	r2, [r3, #24]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	429a      	cmp	r2, r3
 800205e:	d902      	bls.n	8002066 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3303      	adds	r3, #3
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6919      	ldr	r1, [r3, #16]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800207e:	b2db      	uxtb	r3, r3
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	4603      	mov	r3, r0
 8002084:	6978      	ldr	r0, [r7, #20]
 8002086:	f001 ffef 	bl	8004068 <USB_WritePacket>

    ep->xfer_buff  += len;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	691a      	ldr	r2, [r3, #16]
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	441a      	add	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a1a      	ldr	r2, [r3, #32]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	441a      	add	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d809      	bhi.n	80020cc <PCD_WriteEmptyTxFifo+0xe0>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a1a      	ldr	r2, [r3, #32]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d203      	bcs.n	80020cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1be      	bne.n	800204a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	699a      	ldr	r2, [r3, #24]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d811      	bhi.n	80020fc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	2201      	movs	r2, #1
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	6939      	ldr	r1, [r7, #16]
 80020f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020f8:	4013      	ands	r3, r2
 80020fa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	333c      	adds	r3, #60	; 0x3c
 8002120:	3304      	adds	r3, #4
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4413      	add	r3, r2
 800212e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d17b      	bne.n	8002236 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d015      	beq.n	8002174 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	4a61      	ldr	r2, [pc, #388]	; (80022d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	f240 80b9 	bls.w	80022c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80b3 	beq.w	80022c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	4413      	add	r3, r2
 8002166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800216a:	461a      	mov	r2, r3
 800216c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002170:	6093      	str	r3, [r2, #8]
 8002172:	e0a7      	b.n	80022c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	f003 0320 	and.w	r3, r3, #32
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	4413      	add	r3, r2
 8002186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800218a:	461a      	mov	r2, r3
 800218c:	2320      	movs	r3, #32
 800218e:	6093      	str	r3, [r2, #8]
 8002190:	e098      	b.n	80022c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002198:	2b00      	cmp	r3, #0
 800219a:	f040 8093 	bne.w	80022c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	4a4b      	ldr	r2, [pc, #300]	; (80022d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d90f      	bls.n	80021c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00a      	beq.n	80021c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021bc:	461a      	mov	r2, r3
 80021be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021c2:	6093      	str	r3, [r2, #8]
 80021c4:	e07e      	b.n	80022c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	3304      	adds	r3, #4
 80021da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	0159      	lsls	r1, r3, #5
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	440b      	add	r3, r1
 80021e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f2:	1ad2      	subs	r2, r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d114      	bne.n	8002228 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d109      	bne.n	800221a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002210:	461a      	mov	r2, r3
 8002212:	2101      	movs	r1, #1
 8002214:	f002 f9be 	bl	8004594 <USB_EP0_OutStart>
 8002218:	e006      	b.n	8002228 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	441a      	add	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	4619      	mov	r1, r3
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f004 fc0a 	bl	8006a48 <HAL_PCD_DataOutStageCallback>
 8002234:	e046      	b.n	80022c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	4a26      	ldr	r2, [pc, #152]	; (80022d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d124      	bne.n	8002288 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	4413      	add	r3, r2
 8002250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002254:	461a      	mov	r2, r3
 8002256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800225a:	6093      	str	r3, [r2, #8]
 800225c:	e032      	b.n	80022c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	f003 0320 	and.w	r3, r3, #32
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	4413      	add	r3, r2
 8002270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002274:	461a      	mov	r2, r3
 8002276:	2320      	movs	r3, #32
 8002278:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	4619      	mov	r1, r3
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f004 fbe1 	bl	8006a48 <HAL_PCD_DataOutStageCallback>
 8002286:	e01d      	b.n	80022c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d114      	bne.n	80022b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d108      	bne.n	80022b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022b0:	461a      	mov	r2, r3
 80022b2:	2100      	movs	r1, #0
 80022b4:	f002 f96e 	bl	8004594 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	4619      	mov	r1, r3
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f004 fbc2 	bl	8006a48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3720      	adds	r7, #32
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	4f54300a 	.word	0x4f54300a
 80022d4:	4f54310a 	.word	0x4f54310a

080022d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	333c      	adds	r3, #60	; 0x3c
 80022f0:	3304      	adds	r3, #4
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4a15      	ldr	r2, [pc, #84]	; (8002360 <PCD_EP_OutSetupPacket_int+0x88>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d90e      	bls.n	800232c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002314:	2b00      	cmp	r3, #0
 8002316:	d009      	beq.n	800232c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002324:	461a      	mov	r2, r3
 8002326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800232a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f004 fb79 	bl	8006a24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <PCD_EP_OutSetupPacket_int+0x88>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d90c      	bls.n	8002354 <PCD_EP_OutSetupPacket_int+0x7c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d108      	bne.n	8002354 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800234c:	461a      	mov	r2, r3
 800234e:	2101      	movs	r1, #1
 8002350:	f002 f920 	bl	8004594 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	4f54300a 	.word	0x4f54300a

08002364 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
 8002370:	4613      	mov	r3, r2
 8002372:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d107      	bne.n	8002392 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002382:	883b      	ldrh	r3, [r7, #0]
 8002384:	0419      	lsls	r1, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	430a      	orrs	r2, r1
 800238e:	629a      	str	r2, [r3, #40]	; 0x28
 8002390:	e028      	b.n	80023e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	4413      	add	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	e00d      	b.n	80023c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	3340      	adds	r3, #64	; 0x40
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	0c1b      	lsrs	r3, r3, #16
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	4413      	add	r3, r2
 80023ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	3301      	adds	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d3ec      	bcc.n	80023a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023cc:	883b      	ldrh	r3, [r7, #0]
 80023ce:	0418      	lsls	r0, r3, #16
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6819      	ldr	r1, [r3, #0]
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	4302      	orrs	r2, r0
 80023dc:	3340      	adds	r3, #64	; 0x40
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	887a      	ldrh	r2, [r7, #2]
 8002404:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e267      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d075      	beq.n	8002536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800244a:	4b88      	ldr	r3, [pc, #544]	; (800266c <HAL_RCC_OscConfig+0x240>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b04      	cmp	r3, #4
 8002454:	d00c      	beq.n	8002470 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002456:	4b85      	ldr	r3, [pc, #532]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800245e:	2b08      	cmp	r3, #8
 8002460:	d112      	bne.n	8002488 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002462:	4b82      	ldr	r3, [pc, #520]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800246e:	d10b      	bne.n	8002488 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002470:	4b7e      	ldr	r3, [pc, #504]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d05b      	beq.n	8002534 <HAL_RCC_OscConfig+0x108>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d157      	bne.n	8002534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e242      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002490:	d106      	bne.n	80024a0 <HAL_RCC_OscConfig+0x74>
 8002492:	4b76      	ldr	r3, [pc, #472]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a75      	ldr	r2, [pc, #468]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e01d      	b.n	80024dc <HAL_RCC_OscConfig+0xb0>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x98>
 80024aa:	4b70      	ldr	r3, [pc, #448]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a6f      	ldr	r2, [pc, #444]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80024b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	4b6d      	ldr	r3, [pc, #436]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a6c      	ldr	r2, [pc, #432]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80024bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e00b      	b.n	80024dc <HAL_RCC_OscConfig+0xb0>
 80024c4:	4b69      	ldr	r3, [pc, #420]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a68      	ldr	r2, [pc, #416]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80024ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	4b66      	ldr	r3, [pc, #408]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a65      	ldr	r2, [pc, #404]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80024d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d013      	beq.n	800250c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e4:	f7fe fa5e 	bl	80009a4 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ec:	f7fe fa5a 	bl	80009a4 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	; 0x64
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e207      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	4b5b      	ldr	r3, [pc, #364]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0xc0>
 800250a:	e014      	b.n	8002536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7fe fa4a 	bl	80009a4 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002514:	f7fe fa46 	bl	80009a4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	; 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e1f3      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002526:	4b51      	ldr	r3, [pc, #324]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0xe8>
 8002532:	e000      	b.n	8002536 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d063      	beq.n	800260a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002542:	4b4a      	ldr	r3, [pc, #296]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00b      	beq.n	8002566 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254e:	4b47      	ldr	r3, [pc, #284]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002556:	2b08      	cmp	r3, #8
 8002558:	d11c      	bne.n	8002594 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800255a:	4b44      	ldr	r3, [pc, #272]	; (800266c <HAL_RCC_OscConfig+0x240>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d116      	bne.n	8002594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002566:	4b41      	ldr	r3, [pc, #260]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <HAL_RCC_OscConfig+0x152>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d001      	beq.n	800257e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e1c7      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257e:	4b3b      	ldr	r3, [pc, #236]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4937      	ldr	r1, [pc, #220]	; (800266c <HAL_RCC_OscConfig+0x240>)
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002592:	e03a      	b.n	800260a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d020      	beq.n	80025de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800259c:	4b34      	ldr	r3, [pc, #208]	; (8002670 <HAL_RCC_OscConfig+0x244>)
 800259e:	2201      	movs	r2, #1
 80025a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a2:	f7fe f9ff 	bl	80009a4 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025aa:	f7fe f9fb 	bl	80009a4 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e1a8      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025bc:	4b2b      	ldr	r3, [pc, #172]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c8:	4b28      	ldr	r3, [pc, #160]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4925      	ldr	r1, [pc, #148]	; (800266c <HAL_RCC_OscConfig+0x240>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	600b      	str	r3, [r1, #0]
 80025dc:	e015      	b.n	800260a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025de:	4b24      	ldr	r3, [pc, #144]	; (8002670 <HAL_RCC_OscConfig+0x244>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7fe f9de 	bl	80009a4 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ec:	f7fe f9da 	bl	80009a4 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e187      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fe:	4b1b      	ldr	r3, [pc, #108]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d036      	beq.n	8002684 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d016      	beq.n	800264c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <HAL_RCC_OscConfig+0x248>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002624:	f7fe f9be 	bl	80009a4 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800262c:	f7fe f9ba 	bl	80009a4 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e167      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_RCC_OscConfig+0x240>)
 8002640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x200>
 800264a:	e01b      	b.n	8002684 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_RCC_OscConfig+0x248>)
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002652:	f7fe f9a7 	bl	80009a4 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002658:	e00e      	b.n	8002678 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800265a:	f7fe f9a3 	bl	80009a4 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d907      	bls.n	8002678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e150      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
 800266c:	40023800 	.word	0x40023800
 8002670:	42470000 	.word	0x42470000
 8002674:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002678:	4b88      	ldr	r3, [pc, #544]	; (800289c <HAL_RCC_OscConfig+0x470>)
 800267a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1ea      	bne.n	800265a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8097 	beq.w	80027c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002696:	4b81      	ldr	r3, [pc, #516]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10f      	bne.n	80026c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	4b7d      	ldr	r3, [pc, #500]	; (800289c <HAL_RCC_OscConfig+0x470>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	4a7c      	ldr	r2, [pc, #496]	; (800289c <HAL_RCC_OscConfig+0x470>)
 80026ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b0:	6413      	str	r3, [r2, #64]	; 0x40
 80026b2:	4b7a      	ldr	r3, [pc, #488]	; (800289c <HAL_RCC_OscConfig+0x470>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026be:	2301      	movs	r3, #1
 80026c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c2:	4b77      	ldr	r3, [pc, #476]	; (80028a0 <HAL_RCC_OscConfig+0x474>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d118      	bne.n	8002700 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ce:	4b74      	ldr	r3, [pc, #464]	; (80028a0 <HAL_RCC_OscConfig+0x474>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a73      	ldr	r2, [pc, #460]	; (80028a0 <HAL_RCC_OscConfig+0x474>)
 80026d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026da:	f7fe f963 	bl	80009a4 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e2:	f7fe f95f 	bl	80009a4 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e10c      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f4:	4b6a      	ldr	r3, [pc, #424]	; (80028a0 <HAL_RCC_OscConfig+0x474>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d106      	bne.n	8002716 <HAL_RCC_OscConfig+0x2ea>
 8002708:	4b64      	ldr	r3, [pc, #400]	; (800289c <HAL_RCC_OscConfig+0x470>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270c:	4a63      	ldr	r2, [pc, #396]	; (800289c <HAL_RCC_OscConfig+0x470>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	6713      	str	r3, [r2, #112]	; 0x70
 8002714:	e01c      	b.n	8002750 <HAL_RCC_OscConfig+0x324>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b05      	cmp	r3, #5
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0x30c>
 800271e:	4b5f      	ldr	r3, [pc, #380]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002722:	4a5e      	ldr	r2, [pc, #376]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002724:	f043 0304 	orr.w	r3, r3, #4
 8002728:	6713      	str	r3, [r2, #112]	; 0x70
 800272a:	4b5c      	ldr	r3, [pc, #368]	; (800289c <HAL_RCC_OscConfig+0x470>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272e:	4a5b      	ldr	r2, [pc, #364]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6713      	str	r3, [r2, #112]	; 0x70
 8002736:	e00b      	b.n	8002750 <HAL_RCC_OscConfig+0x324>
 8002738:	4b58      	ldr	r3, [pc, #352]	; (800289c <HAL_RCC_OscConfig+0x470>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	4a57      	ldr	r2, [pc, #348]	; (800289c <HAL_RCC_OscConfig+0x470>)
 800273e:	f023 0301 	bic.w	r3, r3, #1
 8002742:	6713      	str	r3, [r2, #112]	; 0x70
 8002744:	4b55      	ldr	r3, [pc, #340]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002748:	4a54      	ldr	r2, [pc, #336]	; (800289c <HAL_RCC_OscConfig+0x470>)
 800274a:	f023 0304 	bic.w	r3, r3, #4
 800274e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d015      	beq.n	8002784 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002758:	f7fe f924 	bl	80009a4 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275e:	e00a      	b.n	8002776 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002760:	f7fe f920 	bl	80009a4 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	; 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e0cb      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002776:	4b49      	ldr	r3, [pc, #292]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0ee      	beq.n	8002760 <HAL_RCC_OscConfig+0x334>
 8002782:	e014      	b.n	80027ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002784:	f7fe f90e 	bl	80009a4 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278a:	e00a      	b.n	80027a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800278c:	f7fe f90a 	bl	80009a4 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f241 3288 	movw	r2, #5000	; 0x1388
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e0b5      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a2:	4b3e      	ldr	r3, [pc, #248]	; (800289c <HAL_RCC_OscConfig+0x470>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1ee      	bne.n	800278c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ae:	7dfb      	ldrb	r3, [r7, #23]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d105      	bne.n	80027c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b4:	4b39      	ldr	r3, [pc, #228]	; (800289c <HAL_RCC_OscConfig+0x470>)
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	4a38      	ldr	r2, [pc, #224]	; (800289c <HAL_RCC_OscConfig+0x470>)
 80027ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80a1 	beq.w	800290c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ca:	4b34      	ldr	r3, [pc, #208]	; (800289c <HAL_RCC_OscConfig+0x470>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d05c      	beq.n	8002890 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d141      	bne.n	8002862 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027de:	4b31      	ldr	r3, [pc, #196]	; (80028a4 <HAL_RCC_OscConfig+0x478>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7fe f8de 	bl	80009a4 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ec:	f7fe f8da 	bl	80009a4 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e087      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fe:	4b27      	ldr	r3, [pc, #156]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69da      	ldr	r2, [r3, #28]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	019b      	lsls	r3, r3, #6
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	085b      	lsrs	r3, r3, #1
 8002822:	3b01      	subs	r3, #1
 8002824:	041b      	lsls	r3, r3, #16
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	061b      	lsls	r3, r3, #24
 800282e:	491b      	ldr	r1, [pc, #108]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002830:	4313      	orrs	r3, r2
 8002832:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002834:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <HAL_RCC_OscConfig+0x478>)
 8002836:	2201      	movs	r2, #1
 8002838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283a:	f7fe f8b3 	bl	80009a4 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002842:	f7fe f8af 	bl	80009a4 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e05c      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x416>
 8002860:	e054      	b.n	800290c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_RCC_OscConfig+0x478>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7fe f89c 	bl	80009a4 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002870:	f7fe f898 	bl	80009a4 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e045      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_RCC_OscConfig+0x470>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x444>
 800288e:	e03d      	b.n	800290c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d107      	bne.n	80028a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e038      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
 800289c:	40023800 	.word	0x40023800
 80028a0:	40007000 	.word	0x40007000
 80028a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <HAL_RCC_OscConfig+0x4ec>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d028      	beq.n	8002908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d121      	bne.n	8002908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d11a      	bne.n	8002908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028d8:	4013      	ands	r3, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d111      	bne.n	8002908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	085b      	lsrs	r3, r3, #1
 80028f0:	3b01      	subs	r3, #1
 80028f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d107      	bne.n	8002908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002902:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800

0800291c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0cc      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002930:	4b68      	ldr	r3, [pc, #416]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d90c      	bls.n	8002958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b65      	ldr	r3, [pc, #404]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b63      	ldr	r3, [pc, #396]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0b8      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d020      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002970:	4b59      	ldr	r3, [pc, #356]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	4a58      	ldr	r2, [pc, #352]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800297a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002988:	4b53      	ldr	r3, [pc, #332]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	4a52      	ldr	r2, [pc, #328]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002994:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	494d      	ldr	r1, [pc, #308]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d044      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d119      	bne.n	80029fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e07f      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d003      	beq.n	80029da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d107      	bne.n	80029ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029da:	4b3f      	ldr	r3, [pc, #252]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e06f      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ea:	4b3b      	ldr	r3, [pc, #236]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e067      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029fa:	4b37      	ldr	r3, [pc, #220]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f023 0203 	bic.w	r2, r3, #3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4934      	ldr	r1, [pc, #208]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a0c:	f7fd ffca 	bl	80009a4 <HAL_GetTick>
 8002a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a12:	e00a      	b.n	8002a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a14:	f7fd ffc6 	bl	80009a4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e04f      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2a:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 020c 	and.w	r2, r3, #12
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d1eb      	bne.n	8002a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b25      	ldr	r3, [pc, #148]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d20c      	bcs.n	8002a64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b22      	ldr	r3, [pc, #136]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e032      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a70:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4916      	ldr	r1, [pc, #88]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	490e      	ldr	r1, [pc, #56]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aa2:	f000 f821 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	490a      	ldr	r1, [pc, #40]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	5ccb      	ldrb	r3, [r1, r3]
 8002ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aba:	4a09      	ldr	r2, [pc, #36]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fd ff2a 	bl	800091c <HAL_InitTick>

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40023c00 	.word	0x40023c00
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	08007044 	.word	0x08007044
 8002ae0:	20000000 	.word	0x20000000
 8002ae4:	20000004 	.word	0x20000004

08002ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aec:	b094      	sub	sp, #80	; 0x50
 8002aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	647b      	str	r3, [r7, #68]	; 0x44
 8002af4:	2300      	movs	r3, #0
 8002af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002af8:	2300      	movs	r3, #0
 8002afa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b00:	4b79      	ldr	r3, [pc, #484]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 030c 	and.w	r3, r3, #12
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d00d      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x40>
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	f200 80e1 	bhi.w	8002cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x34>
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d003      	beq.n	8002b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b1a:	e0db      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b1c:	4b73      	ldr	r3, [pc, #460]	; (8002cec <HAL_RCC_GetSysClockFreq+0x204>)
 8002b1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b20:	e0db      	b.n	8002cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b22:	4b73      	ldr	r3, [pc, #460]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b26:	e0d8      	b.n	8002cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b28:	4b6f      	ldr	r3, [pc, #444]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b32:	4b6d      	ldr	r3, [pc, #436]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d063      	beq.n	8002c06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3e:	4b6a      	ldr	r3, [pc, #424]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	099b      	lsrs	r3, r3, #6
 8002b44:	2200      	movs	r2, #0
 8002b46:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b50:	633b      	str	r3, [r7, #48]	; 0x30
 8002b52:	2300      	movs	r3, #0
 8002b54:	637b      	str	r3, [r7, #52]	; 0x34
 8002b56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b5a:	4622      	mov	r2, r4
 8002b5c:	462b      	mov	r3, r5
 8002b5e:	f04f 0000 	mov.w	r0, #0
 8002b62:	f04f 0100 	mov.w	r1, #0
 8002b66:	0159      	lsls	r1, r3, #5
 8002b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b6c:	0150      	lsls	r0, r2, #5
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4621      	mov	r1, r4
 8002b74:	1a51      	subs	r1, r2, r1
 8002b76:	6139      	str	r1, [r7, #16]
 8002b78:	4629      	mov	r1, r5
 8002b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b8c:	4659      	mov	r1, fp
 8002b8e:	018b      	lsls	r3, r1, #6
 8002b90:	4651      	mov	r1, sl
 8002b92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b96:	4651      	mov	r1, sl
 8002b98:	018a      	lsls	r2, r1, #6
 8002b9a:	4651      	mov	r1, sl
 8002b9c:	ebb2 0801 	subs.w	r8, r2, r1
 8002ba0:	4659      	mov	r1, fp
 8002ba2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bba:	4690      	mov	r8, r2
 8002bbc:	4699      	mov	r9, r3
 8002bbe:	4623      	mov	r3, r4
 8002bc0:	eb18 0303 	adds.w	r3, r8, r3
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	462b      	mov	r3, r5
 8002bc8:	eb49 0303 	adc.w	r3, r9, r3
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bda:	4629      	mov	r1, r5
 8002bdc:	024b      	lsls	r3, r1, #9
 8002bde:	4621      	mov	r1, r4
 8002be0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002be4:	4621      	mov	r1, r4
 8002be6:	024a      	lsls	r2, r1, #9
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bee:	2200      	movs	r2, #0
 8002bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bf8:	f7fd faec 	bl	80001d4 <__aeabi_uldivmod>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4613      	mov	r3, r2
 8002c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c04:	e058      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c06:	4b38      	ldr	r3, [pc, #224]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	099b      	lsrs	r3, r3, #6
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	4611      	mov	r1, r2
 8002c12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c16:	623b      	str	r3, [r7, #32]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c20:	4642      	mov	r2, r8
 8002c22:	464b      	mov	r3, r9
 8002c24:	f04f 0000 	mov.w	r0, #0
 8002c28:	f04f 0100 	mov.w	r1, #0
 8002c2c:	0159      	lsls	r1, r3, #5
 8002c2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c32:	0150      	lsls	r0, r2, #5
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4641      	mov	r1, r8
 8002c3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c3e:	4649      	mov	r1, r9
 8002c40:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c58:	ebb2 040a 	subs.w	r4, r2, sl
 8002c5c:	eb63 050b 	sbc.w	r5, r3, fp
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	00eb      	lsls	r3, r5, #3
 8002c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c6e:	00e2      	lsls	r2, r4, #3
 8002c70:	4614      	mov	r4, r2
 8002c72:	461d      	mov	r5, r3
 8002c74:	4643      	mov	r3, r8
 8002c76:	18e3      	adds	r3, r4, r3
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	eb45 0303 	adc.w	r3, r5, r3
 8002c80:	607b      	str	r3, [r7, #4]
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c8e:	4629      	mov	r1, r5
 8002c90:	028b      	lsls	r3, r1, #10
 8002c92:	4621      	mov	r1, r4
 8002c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c98:	4621      	mov	r1, r4
 8002c9a:	028a      	lsls	r2, r1, #10
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	61fa      	str	r2, [r7, #28]
 8002ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cac:	f7fd fa92 	bl	80001d4 <__aeabi_uldivmod>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	0c1b      	lsrs	r3, r3, #16
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002cc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cd2:	e002      	b.n	8002cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_RCC_GetSysClockFreq+0x204>)
 8002cd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3750      	adds	r7, #80	; 0x50
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	00f42400 	.word	0x00f42400
 8002cf0:	007a1200 	.word	0x007a1200

08002cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	20000000 	.word	0x20000000

08002d0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e07b      	b.n	8002e16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d108      	bne.n	8002d38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d2e:	d009      	beq.n	8002d44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	61da      	str	r2, [r3, #28]
 8002d36:	e005      	b.n	8002d44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fd fd02 	bl	8000768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc8:	ea42 0103 	orr.w	r1, r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	0c1b      	lsrs	r3, r3, #16
 8002de2:	f003 0104 	and.w	r1, r3, #4
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	f003 0210 	and.w	r2, r3, #16
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69da      	ldr	r2, [r3, #28]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e1e:	b084      	sub	sp, #16
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	f107 001c 	add.w	r0, r7, #28
 8002e2c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d122      	bne.n	8002e7c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d105      	bne.n	8002e70 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f001 fbed 	bl	8004650 <USB_CoreReset>
 8002e76:	4603      	mov	r3, r0
 8002e78:	73fb      	strb	r3, [r7, #15]
 8002e7a:	e01a      	b.n	8002eb2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f001 fbe1 	bl	8004650 <USB_CoreReset>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d106      	bne.n	8002ea6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	639a      	str	r2, [r3, #56]	; 0x38
 8002ea4:	e005      	b.n	8002eb2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d10b      	bne.n	8002ed0 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f043 0206 	orr.w	r2, r3, #6
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002edc:	b004      	add	sp, #16
 8002ede:	4770      	bx	lr

08002ee0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	4613      	mov	r3, r2
 8002eec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d165      	bne.n	8002fc0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4a41      	ldr	r2, [pc, #260]	; (8002ffc <USB_SetTurnaroundTime+0x11c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d906      	bls.n	8002f0a <USB_SetTurnaroundTime+0x2a>
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4a40      	ldr	r2, [pc, #256]	; (8003000 <USB_SetTurnaroundTime+0x120>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d202      	bcs.n	8002f0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002f04:	230f      	movs	r3, #15
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	e062      	b.n	8002fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	4a3c      	ldr	r2, [pc, #240]	; (8003000 <USB_SetTurnaroundTime+0x120>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d306      	bcc.n	8002f20 <USB_SetTurnaroundTime+0x40>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	4a3b      	ldr	r2, [pc, #236]	; (8003004 <USB_SetTurnaroundTime+0x124>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d202      	bcs.n	8002f20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002f1a:	230e      	movs	r3, #14
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	e057      	b.n	8002fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4a38      	ldr	r2, [pc, #224]	; (8003004 <USB_SetTurnaroundTime+0x124>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d306      	bcc.n	8002f36 <USB_SetTurnaroundTime+0x56>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4a37      	ldr	r2, [pc, #220]	; (8003008 <USB_SetTurnaroundTime+0x128>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d202      	bcs.n	8002f36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002f30:	230d      	movs	r3, #13
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	e04c      	b.n	8002fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	4a33      	ldr	r2, [pc, #204]	; (8003008 <USB_SetTurnaroundTime+0x128>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d306      	bcc.n	8002f4c <USB_SetTurnaroundTime+0x6c>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	4a32      	ldr	r2, [pc, #200]	; (800300c <USB_SetTurnaroundTime+0x12c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d802      	bhi.n	8002f4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002f46:	230c      	movs	r3, #12
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	e041      	b.n	8002fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4a2f      	ldr	r2, [pc, #188]	; (800300c <USB_SetTurnaroundTime+0x12c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d906      	bls.n	8002f62 <USB_SetTurnaroundTime+0x82>
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4a2e      	ldr	r2, [pc, #184]	; (8003010 <USB_SetTurnaroundTime+0x130>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d802      	bhi.n	8002f62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002f5c:	230b      	movs	r3, #11
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	e036      	b.n	8002fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4a2a      	ldr	r2, [pc, #168]	; (8003010 <USB_SetTurnaroundTime+0x130>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d906      	bls.n	8002f78 <USB_SetTurnaroundTime+0x98>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	4a29      	ldr	r2, [pc, #164]	; (8003014 <USB_SetTurnaroundTime+0x134>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d802      	bhi.n	8002f78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002f72:	230a      	movs	r3, #10
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	e02b      	b.n	8002fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4a26      	ldr	r2, [pc, #152]	; (8003014 <USB_SetTurnaroundTime+0x134>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d906      	bls.n	8002f8e <USB_SetTurnaroundTime+0xae>
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	4a25      	ldr	r2, [pc, #148]	; (8003018 <USB_SetTurnaroundTime+0x138>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d202      	bcs.n	8002f8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002f88:	2309      	movs	r3, #9
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	e020      	b.n	8002fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4a21      	ldr	r2, [pc, #132]	; (8003018 <USB_SetTurnaroundTime+0x138>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d306      	bcc.n	8002fa4 <USB_SetTurnaroundTime+0xc4>
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	4a20      	ldr	r2, [pc, #128]	; (800301c <USB_SetTurnaroundTime+0x13c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d802      	bhi.n	8002fa4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002f9e:	2308      	movs	r3, #8
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	e015      	b.n	8002fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4a1d      	ldr	r2, [pc, #116]	; (800301c <USB_SetTurnaroundTime+0x13c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d906      	bls.n	8002fba <USB_SetTurnaroundTime+0xda>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4a1c      	ldr	r2, [pc, #112]	; (8003020 <USB_SetTurnaroundTime+0x140>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d202      	bcs.n	8002fba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002fb4:	2307      	movs	r3, #7
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	e00a      	b.n	8002fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002fba:	2306      	movs	r3, #6
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	e007      	b.n	8002fd0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002fc6:	2309      	movs	r3, #9
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	e001      	b.n	8002fd0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002fcc:	2309      	movs	r3, #9
 8002fce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	029b      	lsls	r3, r3, #10
 8002fe4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	371c      	adds	r7, #28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	00d8acbf 	.word	0x00d8acbf
 8003000:	00e4e1c0 	.word	0x00e4e1c0
 8003004:	00f42400 	.word	0x00f42400
 8003008:	01067380 	.word	0x01067380
 800300c:	011a499f 	.word	0x011a499f
 8003010:	01312cff 	.word	0x01312cff
 8003014:	014ca43f 	.word	0x014ca43f
 8003018:	016e3600 	.word	0x016e3600
 800301c:	01a6ab1f 	.word	0x01a6ab1f
 8003020:	01e84800 	.word	0x01e84800

08003024 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f043 0201 	orr.w	r2, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f023 0201 	bic.w	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d115      	bne.n	80030b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003096:	2001      	movs	r0, #1
 8003098:	f7fd fc90 	bl	80009bc <HAL_Delay>
      ms++;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3301      	adds	r3, #1
 80030a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f001 fa45 	bl	8004532 <USB_GetMode>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d01e      	beq.n	80030ec <USB_SetCurrentMode+0x84>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b31      	cmp	r3, #49	; 0x31
 80030b2:	d9f0      	bls.n	8003096 <USB_SetCurrentMode+0x2e>
 80030b4:	e01a      	b.n	80030ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d115      	bne.n	80030e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80030c8:	2001      	movs	r0, #1
 80030ca:	f7fd fc77 	bl	80009bc <HAL_Delay>
      ms++;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	3301      	adds	r3, #1
 80030d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f001 fa2c 	bl	8004532 <USB_GetMode>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <USB_SetCurrentMode+0x84>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2b31      	cmp	r3, #49	; 0x31
 80030e4:	d9f0      	bls.n	80030c8 <USB_SetCurrentMode+0x60>
 80030e6:	e001      	b.n	80030ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e005      	b.n	80030f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b32      	cmp	r3, #50	; 0x32
 80030f0:	d101      	bne.n	80030f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003100:	b084      	sub	sp, #16
 8003102:	b580      	push	{r7, lr}
 8003104:	b086      	sub	sp, #24
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800310e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800311a:	2300      	movs	r3, #0
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	e009      	b.n	8003134 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	3340      	adds	r3, #64	; 0x40
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	2200      	movs	r2, #0
 800312c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	3301      	adds	r3, #1
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	2b0e      	cmp	r3, #14
 8003138:	d9f2      	bls.n	8003120 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800313a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800313c:	2b00      	cmp	r3, #0
 800313e:	d11c      	bne.n	800317a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800314e:	f043 0302 	orr.w	r3, r3, #2
 8003152:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003158:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	639a      	str	r2, [r3, #56]	; 0x38
 8003178:	e00b      	b.n	8003192 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003198:	461a      	mov	r2, r3
 800319a:	2300      	movs	r3, #0
 800319c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a4:	4619      	mov	r1, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ac:	461a      	mov	r2, r3
 80031ae:	680b      	ldr	r3, [r1, #0]
 80031b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d10c      	bne.n	80031d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80031b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d104      	bne.n	80031c8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80031be:	2100      	movs	r1, #0
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f965 	bl	8003490 <USB_SetDevSpeed>
 80031c6:	e008      	b.n	80031da <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80031c8:	2101      	movs	r1, #1
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f960 	bl	8003490 <USB_SetDevSpeed>
 80031d0:	e003      	b.n	80031da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80031d2:	2103      	movs	r1, #3
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f95b 	bl	8003490 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80031da:	2110      	movs	r1, #16
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f8f3 	bl	80033c8 <USB_FlushTxFifo>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f91f 	bl	8003430 <USB_FlushRxFifo>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003202:	461a      	mov	r2, r3
 8003204:	2300      	movs	r3, #0
 8003206:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320e:	461a      	mov	r2, r3
 8003210:	2300      	movs	r3, #0
 8003212:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800321a:	461a      	mov	r2, r3
 800321c:	2300      	movs	r3, #0
 800321e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003220:	2300      	movs	r3, #0
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	e043      	b.n	80032ae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800323c:	d118      	bne.n	8003270 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10a      	bne.n	800325a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003250:	461a      	mov	r2, r3
 8003252:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	e013      	b.n	8003282 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4413      	add	r3, r2
 8003262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003266:	461a      	mov	r2, r3
 8003268:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e008      	b.n	8003282 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4413      	add	r3, r2
 8003278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800327c:	461a      	mov	r2, r3
 800327e:	2300      	movs	r3, #0
 8003280:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800328e:	461a      	mov	r2, r3
 8003290:	2300      	movs	r3, #0
 8003292:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a0:	461a      	mov	r2, r3
 80032a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	3301      	adds	r3, #1
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d3b7      	bcc.n	8003226 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032b6:	2300      	movs	r3, #0
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	e043      	b.n	8003344 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032d2:	d118      	bne.n	8003306 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10a      	bne.n	80032f0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e6:	461a      	mov	r2, r3
 80032e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e013      	b.n	8003318 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fc:	461a      	mov	r2, r3
 80032fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	e008      	b.n	8003318 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003312:	461a      	mov	r2, r3
 8003314:	2300      	movs	r3, #0
 8003316:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4413      	add	r3, r2
 8003320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003324:	461a      	mov	r2, r3
 8003326:	2300      	movs	r3, #0
 8003328:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003336:	461a      	mov	r2, r3
 8003338:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800333c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	3301      	adds	r3, #1
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	429a      	cmp	r2, r3
 800334a:	d3b7      	bcc.n	80032bc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800335a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800335e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800336c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003370:	2b00      	cmp	r3, #0
 8003372:	d105      	bne.n	8003380 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f043 0210 	orr.w	r2, r3, #16
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699a      	ldr	r2, [r3, #24]
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <USB_DevInit+0x2c4>)
 8003386:	4313      	orrs	r3, r2
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800338c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f043 0208 	orr.w	r2, r3, #8
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800339e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d107      	bne.n	80033b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033ac:	f043 0304 	orr.w	r3, r3, #4
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033c0:	b004      	add	sp, #16
 80033c2:	4770      	bx	lr
 80033c4:	803c3800 	.word	0x803c3800

080033c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3301      	adds	r3, #1
 80033da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4a13      	ldr	r2, [pc, #76]	; (800342c <USB_FlushTxFifo+0x64>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d901      	bls.n	80033e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e01b      	b.n	8003420 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	daf2      	bge.n	80033d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	019b      	lsls	r3, r3, #6
 80033f8:	f043 0220 	orr.w	r2, r3, #32
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3301      	adds	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4a08      	ldr	r2, [pc, #32]	; (800342c <USB_FlushTxFifo+0x64>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e006      	b.n	8003420 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b20      	cmp	r3, #32
 800341c:	d0f0      	beq.n	8003400 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	00030d40 	.word	0x00030d40

08003430 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3301      	adds	r3, #1
 8003440:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4a11      	ldr	r2, [pc, #68]	; (800348c <USB_FlushRxFifo+0x5c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e018      	b.n	8003480 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	daf2      	bge.n	800343c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2210      	movs	r2, #16
 800345e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3301      	adds	r3, #1
 8003464:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4a08      	ldr	r2, [pc, #32]	; (800348c <USB_FlushRxFifo+0x5c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e006      	b.n	8003480 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b10      	cmp	r3, #16
 800347c:	d0f0      	beq.n	8003460 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	00030d40 	.word	0x00030d40

08003490 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	68f9      	ldr	r1, [r7, #12]
 80034ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034b0:	4313      	orrs	r3, r2
 80034b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b087      	sub	sp, #28
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0306 	and.w	r3, r3, #6
 80034da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d102      	bne.n	80034e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80034e2:	2300      	movs	r3, #0
 80034e4:	75fb      	strb	r3, [r7, #23]
 80034e6:	e00a      	b.n	80034fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d002      	beq.n	80034f4 <USB_GetDevSpeed+0x32>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2b06      	cmp	r3, #6
 80034f2:	d102      	bne.n	80034fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80034f4:	2302      	movs	r3, #2
 80034f6:	75fb      	strb	r3, [r7, #23]
 80034f8:	e001      	b.n	80034fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80034fa:	230f      	movs	r3, #15
 80034fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003500:	4618      	mov	r0, r3
 8003502:	371c      	adds	r7, #28
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	785b      	ldrb	r3, [r3, #1]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d13a      	bne.n	800359e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	2101      	movs	r1, #1
 800353a:	fa01 f303 	lsl.w	r3, r1, r3
 800353e:	b29b      	uxth	r3, r3
 8003540:	68f9      	ldr	r1, [r7, #12]
 8003542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003546:	4313      	orrs	r3, r2
 8003548:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4413      	add	r3, r2
 8003552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d155      	bne.n	800360c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4413      	add	r3, r2
 8003568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	791b      	ldrb	r3, [r3, #4]
 800357a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800357c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	059b      	lsls	r3, r3, #22
 8003582:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003584:	4313      	orrs	r3, r2
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	0151      	lsls	r1, r2, #5
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	440a      	add	r2, r1
 800358e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	e036      	b.n	800360c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	2101      	movs	r1, #1
 80035b0:	fa01 f303 	lsl.w	r3, r1, r3
 80035b4:	041b      	lsls	r3, r3, #16
 80035b6:	68f9      	ldr	r1, [r7, #12]
 80035b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035bc:	4313      	orrs	r3, r2
 80035be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d11a      	bne.n	800360c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	791b      	ldrb	r3, [r3, #4]
 80035f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80035f2:	430b      	orrs	r3, r1
 80035f4:	4313      	orrs	r3, r2
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	0151      	lsls	r1, r2, #5
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	440a      	add	r2, r1
 80035fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800360a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
	...

0800361c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	785b      	ldrb	r3, [r3, #1]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d161      	bne.n	80036fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4413      	add	r3, r2
 8003640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800364a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800364e:	d11f      	bne.n	8003690 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	0151      	lsls	r1, r2, #5
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	440a      	add	r2, r1
 8003666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800366a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800366e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4413      	add	r3, r2
 8003678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	0151      	lsls	r1, r2, #5
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	440a      	add	r2, r1
 8003686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800368a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800368e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	2101      	movs	r1, #1
 80036a2:	fa01 f303 	lsl.w	r3, r1, r3
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	43db      	mvns	r3, r3
 80036aa:	68f9      	ldr	r1, [r7, #12]
 80036ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036b0:	4013      	ands	r3, r2
 80036b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ba:	69da      	ldr	r2, [r3, #28]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	2101      	movs	r1, #1
 80036c6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	68f9      	ldr	r1, [r7, #12]
 80036d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036d4:	4013      	ands	r3, r2
 80036d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	0159      	lsls	r1, r3, #5
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	440b      	add	r3, r1
 80036ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f2:	4619      	mov	r1, r3
 80036f4:	4b35      	ldr	r3, [pc, #212]	; (80037cc <USB_DeactivateEndpoint+0x1b0>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]
 80036fa:	e060      	b.n	80037be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4413      	add	r3, r2
 8003704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800370e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003712:	d11f      	bne.n	8003754 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4413      	add	r3, r2
 800371c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	0151      	lsls	r1, r2, #5
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	440a      	add	r2, r1
 800372a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800372e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003732:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	0151      	lsls	r1, r2, #5
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	440a      	add	r2, r1
 800374a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800374e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003752:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800375a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	2101      	movs	r1, #1
 8003766:	fa01 f303 	lsl.w	r3, r1, r3
 800376a:	041b      	lsls	r3, r3, #16
 800376c:	43db      	mvns	r3, r3
 800376e:	68f9      	ldr	r1, [r7, #12]
 8003770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003774:	4013      	ands	r3, r2
 8003776:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	2101      	movs	r1, #1
 800378a:	fa01 f303 	lsl.w	r3, r1, r3
 800378e:	041b      	lsls	r3, r3, #16
 8003790:	43db      	mvns	r3, r3
 8003792:	68f9      	ldr	r1, [r7, #12]
 8003794:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003798:	4013      	ands	r3, r2
 800379a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	0159      	lsls	r1, r3, #5
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	440b      	add	r3, r1
 80037b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b6:	4619      	mov	r1, r3
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <USB_DeactivateEndpoint+0x1b4>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	ec337800 	.word	0xec337800
 80037d0:	eff37800 	.word	0xeff37800

080037d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08a      	sub	sp, #40	; 0x28
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	785b      	ldrb	r3, [r3, #1]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	f040 815c 	bne.w	8003aae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d132      	bne.n	8003864 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	0151      	lsls	r1, r2, #5
 8003810:	69fa      	ldr	r2, [r7, #28]
 8003812:	440a      	add	r2, r1
 8003814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003818:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800381c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003820:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	4413      	add	r3, r2
 800382a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	0151      	lsls	r1, r2, #5
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	440a      	add	r2, r1
 8003838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800383c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003840:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	0151      	lsls	r1, r2, #5
 8003854:	69fa      	ldr	r2, [r7, #28]
 8003856:	440a      	add	r2, r1
 8003858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800385c:	0cdb      	lsrs	r3, r3, #19
 800385e:	04db      	lsls	r3, r3, #19
 8003860:	6113      	str	r3, [r2, #16]
 8003862:	e074      	b.n	800394e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	0151      	lsls	r1, r2, #5
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	440a      	add	r2, r1
 800387a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800387e:	0cdb      	lsrs	r3, r3, #19
 8003880:	04db      	lsls	r3, r3, #19
 8003882:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	4413      	add	r3, r2
 800388c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	0151      	lsls	r1, r2, #5
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	440a      	add	r2, r1
 800389a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800389e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	6999      	ldr	r1, [r3, #24]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	440b      	add	r3, r1
 80038c0:	1e59      	subs	r1, r3, #1
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80038cc:	4b9d      	ldr	r3, [pc, #628]	; (8003b44 <USB_EPStartXfer+0x370>)
 80038ce:	400b      	ands	r3, r1
 80038d0:	69b9      	ldr	r1, [r7, #24]
 80038d2:	0148      	lsls	r0, r1, #5
 80038d4:	69f9      	ldr	r1, [r7, #28]
 80038d6:	4401      	add	r1, r0
 80038d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80038dc:	4313      	orrs	r3, r2
 80038de:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f6:	69b9      	ldr	r1, [r7, #24]
 80038f8:	0148      	lsls	r0, r1, #5
 80038fa:	69f9      	ldr	r1, [r7, #28]
 80038fc:	4401      	add	r1, r0
 80038fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003902:	4313      	orrs	r3, r2
 8003904:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	791b      	ldrb	r3, [r3, #4]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d11f      	bne.n	800394e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	0151      	lsls	r1, r2, #5
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	440a      	add	r2, r1
 8003924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003928:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800392c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	0151      	lsls	r1, r2, #5
 8003940:	69fa      	ldr	r2, [r7, #28]
 8003942:	440a      	add	r2, r1
 8003944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003948:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800394c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d14b      	bne.n	80039ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d009      	beq.n	8003970 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003968:	461a      	mov	r2, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	791b      	ldrb	r3, [r3, #4]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d128      	bne.n	80039ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003984:	2b00      	cmp	r3, #0
 8003986:	d110      	bne.n	80039aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	0151      	lsls	r1, r2, #5
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	440a      	add	r2, r1
 800399e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	e00f      	b.n	80039ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	0151      	lsls	r1, r2, #5
 80039bc:	69fa      	ldr	r2, [r7, #28]
 80039be:	440a      	add	r2, r1
 80039c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	0151      	lsls	r1, r2, #5
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	440a      	add	r2, r1
 80039e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e133      	b.n	8003c54 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	0151      	lsls	r1, r2, #5
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	440a      	add	r2, r1
 8003a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a0a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	791b      	ldrb	r3, [r3, #4]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d015      	beq.n	8003a40 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 811b 	beq.w	8003c54 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	2101      	movs	r1, #1
 8003a30:	fa01 f303 	lsl.w	r3, r1, r3
 8003a34:	69f9      	ldr	r1, [r7, #28]
 8003a36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	634b      	str	r3, [r1, #52]	; 0x34
 8003a3e:	e109      	b.n	8003c54 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d110      	bne.n	8003a72 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	0151      	lsls	r1, r2, #5
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	440a      	add	r2, r1
 8003a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	e00f      	b.n	8003a92 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	0151      	lsls	r1, r2, #5
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	440a      	add	r2, r1
 8003a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a90:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6919      	ldr	r1, [r3, #16]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	781a      	ldrb	r2, [r3, #0]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	b298      	uxth	r0, r3
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fade 	bl	8004068 <USB_WritePacket>
 8003aac:	e0d2      	b.n	8003c54 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	0151      	lsls	r1, r2, #5
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	440a      	add	r2, r1
 8003ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ac8:	0cdb      	lsrs	r3, r3, #19
 8003aca:	04db      	lsls	r3, r3, #19
 8003acc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	0151      	lsls	r1, r2, #5
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	440a      	add	r2, r1
 8003ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ae8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003aec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003af0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d126      	bne.n	8003b48 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b10:	69b9      	ldr	r1, [r7, #24]
 8003b12:	0148      	lsls	r0, r1, #5
 8003b14:	69f9      	ldr	r1, [r7, #28]
 8003b16:	4401      	add	r1, r0
 8003b18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	0151      	lsls	r1, r2, #5
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	440a      	add	r2, r1
 8003b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b3e:	6113      	str	r3, [r2, #16]
 8003b40:	e03a      	b.n	8003bb8 <USB_EPStartXfer+0x3e4>
 8003b42:	bf00      	nop
 8003b44:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4413      	add	r3, r2
 8003b52:	1e5a      	subs	r2, r3, #1
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	8afa      	ldrh	r2, [r7, #22]
 8003b64:	fb03 f202 	mul.w	r2, r3, r2
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	8afb      	ldrh	r3, [r7, #22]
 8003b7c:	04d9      	lsls	r1, r3, #19
 8003b7e:	4b38      	ldr	r3, [pc, #224]	; (8003c60 <USB_EPStartXfer+0x48c>)
 8003b80:	400b      	ands	r3, r1
 8003b82:	69b9      	ldr	r1, [r7, #24]
 8003b84:	0148      	lsls	r0, r1, #5
 8003b86:	69f9      	ldr	r1, [r7, #28]
 8003b88:	4401      	add	r1, r0
 8003b8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba8:	69b9      	ldr	r1, [r7, #24]
 8003baa:	0148      	lsls	r0, r1, #5
 8003bac:	69f9      	ldr	r1, [r7, #28]
 8003bae:	4401      	add	r1, r0
 8003bb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003bb8:	79fb      	ldrb	r3, [r7, #7]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d10d      	bne.n	8003bda <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	6919      	ldr	r1, [r3, #16]
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd6:	460a      	mov	r2, r1
 8003bd8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	791b      	ldrb	r3, [r3, #4]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d128      	bne.n	8003c34 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d110      	bne.n	8003c14 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	0151      	lsls	r1, r2, #5
 8003c04:	69fa      	ldr	r2, [r7, #28]
 8003c06:	440a      	add	r2, r1
 8003c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e00f      	b.n	8003c34 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	0151      	lsls	r1, r2, #5
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	440a      	add	r2, r1
 8003c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c32:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	0151      	lsls	r1, r2, #5
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	440a      	add	r2, r1
 8003c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3720      	adds	r7, #32
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	1ff80000 	.word	0x1ff80000

08003c64 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	785b      	ldrb	r3, [r3, #1]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	f040 80ce 	bne.w	8003e22 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d132      	bne.n	8003cf4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	0151      	lsls	r1, r2, #5
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	440a      	add	r2, r1
 8003ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ca8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ccc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	0151      	lsls	r1, r2, #5
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	440a      	add	r2, r1
 8003ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cec:	0cdb      	lsrs	r3, r3, #19
 8003cee:	04db      	lsls	r3, r3, #19
 8003cf0:	6113      	str	r3, [r2, #16]
 8003cf2:	e04e      	b.n	8003d92 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	0151      	lsls	r1, r2, #5
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	440a      	add	r2, r1
 8003d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d0e:	0cdb      	lsrs	r3, r3, #19
 8003d10:	04db      	lsls	r3, r3, #19
 8003d12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	0151      	lsls	r1, r2, #5
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	440a      	add	r2, r1
 8003d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d36:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	699a      	ldr	r2, [r3, #24]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d903      	bls.n	8003d4c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	0151      	lsls	r1, r2, #5
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	440a      	add	r2, r1
 8003d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d82:	6939      	ldr	r1, [r7, #16]
 8003d84:	0148      	lsls	r0, r1, #5
 8003d86:	6979      	ldr	r1, [r7, #20]
 8003d88:	4401      	add	r1, r0
 8003d8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d11e      	bne.n	8003dd6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d009      	beq.n	8003db4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dac:	461a      	mov	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	0151      	lsls	r1, r2, #5
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	440a      	add	r2, r1
 8003dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	e097      	b.n	8003f06 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	0151      	lsls	r1, r2, #5
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	440a      	add	r2, r1
 8003dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003df4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 8083 	beq.w	8003f06 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	2101      	movs	r1, #1
 8003e12:	fa01 f303 	lsl.w	r3, r1, r3
 8003e16:	6979      	ldr	r1, [r7, #20]
 8003e18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	634b      	str	r3, [r1, #52]	; 0x34
 8003e20:	e071      	b.n	8003f06 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	0151      	lsls	r1, r2, #5
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	440a      	add	r2, r1
 8003e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e3c:	0cdb      	lsrs	r3, r3, #19
 8003e3e:	04db      	lsls	r3, r3, #19
 8003e40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	0151      	lsls	r1, r2, #5
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	440a      	add	r2, r1
 8003e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e64:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	0151      	lsls	r1, r2, #5
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	440a      	add	r2, r1
 8003e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb4:	6939      	ldr	r1, [r7, #16]
 8003eb6:	0148      	lsls	r0, r1, #5
 8003eb8:	6979      	ldr	r1, [r7, #20]
 8003eba:	4401      	add	r1, r0
 8003ebc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d10d      	bne.n	8003ee6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	6919      	ldr	r1, [r3, #16]
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee2:	460a      	mov	r2, r1
 8003ee4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	0151      	lsls	r1, r2, #5
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	440a      	add	r2, r1
 8003efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	785b      	ldrb	r3, [r3, #1]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d14a      	bne.n	8003fc8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f4a:	f040 8086 	bne.w	800405a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	7812      	ldrb	r2, [r2, #0]
 8003f62:	0151      	lsls	r1, r2, #5
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	440a      	add	r2, r1
 8003f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f70:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	7812      	ldrb	r2, [r2, #0]
 8003f86:	0151      	lsls	r1, r2, #5
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	440a      	add	r2, r1
 8003f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d902      	bls.n	8003fac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	75fb      	strb	r3, [r7, #23]
          break;
 8003faa:	e056      	b.n	800405a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fc4:	d0e7      	beq.n	8003f96 <USB_EPStopXfer+0x82>
 8003fc6:	e048      	b.n	800405a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fe0:	d13b      	bne.n	800405a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	7812      	ldrb	r2, [r2, #0]
 8003ff6:	0151      	lsls	r1, r2, #5
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	440a      	add	r2, r1
 8003ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004000:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004004:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	7812      	ldrb	r2, [r2, #0]
 800401a:	0151      	lsls	r1, r2, #5
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	440a      	add	r2, r1
 8004020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004024:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004028:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3301      	adds	r3, #1
 800402e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f242 7210 	movw	r2, #10000	; 0x2710
 8004036:	4293      	cmp	r3, r2
 8004038:	d902      	bls.n	8004040 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	75fb      	strb	r3, [r7, #23]
          break;
 800403e:	e00c      	b.n	800405a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004058:	d0e7      	beq.n	800402a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800405a:	7dfb      	ldrb	r3, [r7, #23]
}
 800405c:	4618      	mov	r0, r3
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004068:	b480      	push	{r7}
 800406a:	b089      	sub	sp, #36	; 0x24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	4611      	mov	r1, r2
 8004074:	461a      	mov	r2, r3
 8004076:	460b      	mov	r3, r1
 8004078:	71fb      	strb	r3, [r7, #7]
 800407a:	4613      	mov	r3, r2
 800407c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004086:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800408a:	2b00      	cmp	r3, #0
 800408c:	d123      	bne.n	80040d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800408e:	88bb      	ldrh	r3, [r7, #4]
 8004090:	3303      	adds	r3, #3
 8004092:	089b      	lsrs	r3, r3, #2
 8004094:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004096:	2300      	movs	r3, #0
 8004098:	61bb      	str	r3, [r7, #24]
 800409a:	e018      	b.n	80040ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	031a      	lsls	r2, r3, #12
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a8:	461a      	mov	r2, r3
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	3301      	adds	r3, #1
 80040b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	3301      	adds	r3, #1
 80040ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	3301      	adds	r3, #1
 80040c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	3301      	adds	r3, #1
 80040c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	3301      	adds	r3, #1
 80040cc:	61bb      	str	r3, [r7, #24]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d3e2      	bcc.n	800409c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3724      	adds	r7, #36	; 0x24
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b08b      	sub	sp, #44	; 0x2c
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	4613      	mov	r3, r2
 80040f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80040fa:	88fb      	ldrh	r3, [r7, #6]
 80040fc:	089b      	lsrs	r3, r3, #2
 80040fe:	b29b      	uxth	r3, r3
 8004100:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004102:	88fb      	ldrh	r3, [r7, #6]
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800410a:	2300      	movs	r3, #0
 800410c:	623b      	str	r3, [r7, #32]
 800410e:	e014      	b.n	800413a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	601a      	str	r2, [r3, #0]
    pDest++;
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	3301      	adds	r3, #1
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	3301      	adds	r3, #1
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	3301      	adds	r3, #1
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	3301      	adds	r3, #1
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	3301      	adds	r3, #1
 8004138:	623b      	str	r3, [r7, #32]
 800413a:	6a3a      	ldr	r2, [r7, #32]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	429a      	cmp	r2, r3
 8004140:	d3e6      	bcc.n	8004110 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004142:	8bfb      	ldrh	r3, [r7, #30]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01e      	beq.n	8004186 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004152:	461a      	mov	r2, r3
 8004154:	f107 0310 	add.w	r3, r7, #16
 8004158:	6812      	ldr	r2, [r2, #0]
 800415a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
 8004168:	b2da      	uxtb	r2, r3
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	701a      	strb	r2, [r3, #0]
      i++;
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	3301      	adds	r3, #1
 8004172:	623b      	str	r3, [r7, #32]
      pDest++;
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	3301      	adds	r3, #1
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800417a:	8bfb      	ldrh	r3, [r7, #30]
 800417c:	3b01      	subs	r3, #1
 800417e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004180:	8bfb      	ldrh	r3, [r7, #30]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1ea      	bne.n	800415c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004188:	4618      	mov	r0, r3
 800418a:	372c      	adds	r7, #44	; 0x2c
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	785b      	ldrb	r3, [r3, #1]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d12c      	bne.n	800420a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	db12      	blt.n	80041e8 <USB_EPSetStall+0x54>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00f      	beq.n	80041e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	0151      	lsls	r1, r2, #5
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	440a      	add	r2, r1
 80041de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	0151      	lsls	r1, r2, #5
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	440a      	add	r2, r1
 80041fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004202:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	e02b      	b.n	8004262 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	db12      	blt.n	8004242 <USB_EPSetStall+0xae>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00f      	beq.n	8004242 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	0151      	lsls	r1, r2, #5
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	440a      	add	r2, r1
 8004238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800423c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004240:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	0151      	lsls	r1, r2, #5
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	440a      	add	r2, r1
 8004258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800425c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004260:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	785b      	ldrb	r3, [r3, #1]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d128      	bne.n	80042de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	0151      	lsls	r1, r2, #5
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	440a      	add	r2, r1
 80042a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	791b      	ldrb	r3, [r3, #4]
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d003      	beq.n	80042bc <USB_EPClearStall+0x4c>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	791b      	ldrb	r3, [r3, #4]
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d138      	bne.n	800432e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	0151      	lsls	r1, r2, #5
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	440a      	add	r2, r1
 80042d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	e027      	b.n	800432e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	0151      	lsls	r1, r2, #5
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	440a      	add	r2, r1
 80042f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	791b      	ldrb	r3, [r3, #4]
 8004302:	2b03      	cmp	r3, #3
 8004304:	d003      	beq.n	800430e <USB_EPClearStall+0x9e>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	791b      	ldrb	r3, [r3, #4]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d10f      	bne.n	800432e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	0151      	lsls	r1, r2, #5
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	440a      	add	r2, r1
 8004324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800432c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800435a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800435e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004370:	68f9      	ldr	r1, [r7, #12]
 8004372:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004376:	4313      	orrs	r3, r2
 8004378:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043a2:	f023 0303 	bic.w	r3, r3, #3
 80043a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043b6:	f023 0302 	bic.w	r3, r3, #2
 80043ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b085      	sub	sp, #20
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043e4:	f023 0303 	bic.w	r3, r3, #3
 80043e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043f8:	f043 0302 	orr.w	r3, r3, #2
 80043fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4013      	ands	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004424:	68fb      	ldr	r3, [r7, #12]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004432:	b480      	push	{r7}
 8004434:	b085      	sub	sp, #20
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	4013      	ands	r3, r2
 8004454:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	0c1b      	lsrs	r3, r3, #16
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004466:	b480      	push	{r7}
 8004468:	b085      	sub	sp, #20
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	4013      	ands	r3, r2
 8004488:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	b29b      	uxth	r3, r3
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	460b      	mov	r3, r1
 80044a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80044aa:	78fb      	ldrb	r3, [r7, #3]
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	4013      	ands	r3, r2
 80044c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80044c8:	68bb      	ldr	r3, [r7, #8]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b087      	sub	sp, #28
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	460b      	mov	r3, r1
 80044e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80044fa:	78fb      	ldrb	r3, [r7, #3]
 80044fc:	f003 030f 	and.w	r3, r3, #15
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	fa22 f303 	lsr.w	r3, r2, r3
 8004506:	01db      	lsls	r3, r3, #7
 8004508:	b2db      	uxtb	r3, r3
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4013      	ands	r3, r2
 8004522:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004524:	68bb      	ldr	r3, [r7, #8]
}
 8004526:	4618      	mov	r0, r3
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0301 	and.w	r3, r3, #1
}
 8004542:	4618      	mov	r0, r3
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800454e:	b480      	push	{r7}
 8004550:	b085      	sub	sp, #20
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004568:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800456c:	f023 0307 	bic.w	r3, r3, #7
 8004570:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004584:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	460b      	mov	r3, r1
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	333c      	adds	r3, #60	; 0x3c
 80045aa:	3304      	adds	r3, #4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	4a26      	ldr	r2, [pc, #152]	; (800464c <USB_EP0_OutStart+0xb8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d90a      	bls.n	80045ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045c8:	d101      	bne.n	80045ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	e037      	b.n	800463e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d4:	461a      	mov	r2, r3
 80045d6:	2300      	movs	r3, #0
 80045d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045fc:	f043 0318 	orr.w	r3, r3, #24
 8004600:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004610:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004614:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004616:	7afb      	ldrb	r3, [r7, #11]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d10f      	bne.n	800463c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004622:	461a      	mov	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004636:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800463a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	4f54300a 	.word	0x4f54300a

08004650 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3301      	adds	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <USB_CoreReset+0x64>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e01b      	b.n	80046a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	daf2      	bge.n	800465c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f043 0201 	orr.w	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3301      	adds	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a09      	ldr	r2, [pc, #36]	; (80046b4 <USB_CoreReset+0x64>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d901      	bls.n	8004698 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e006      	b.n	80046a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d0f0      	beq.n	8004686 <USB_CoreReset+0x36>

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	00030d40 	.word	0x00030d40

080046b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80046c4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80046c8:	f002 fc1e 	bl	8006f08 <USBD_static_malloc>
 80046cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d109      	bne.n	80046e8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	32b0      	adds	r2, #176	; 0xb0
 80046de:	2100      	movs	r1, #0
 80046e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80046e4:	2302      	movs	r3, #2
 80046e6:	e0d4      	b.n	8004892 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80046e8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80046ec:	2100      	movs	r1, #0
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f002 fc4e 	bl	8006f90 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	32b0      	adds	r2, #176	; 0xb0
 80046fe:	68f9      	ldr	r1, [r7, #12]
 8004700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	32b0      	adds	r2, #176	; 0xb0
 800470e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	7c1b      	ldrb	r3, [r3, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d138      	bne.n	8004792 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004720:	4b5e      	ldr	r3, [pc, #376]	; (800489c <USBD_CDC_Init+0x1e4>)
 8004722:	7819      	ldrb	r1, [r3, #0]
 8004724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004728:	2202      	movs	r2, #2
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f002 fac9 	bl	8006cc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004730:	4b5a      	ldr	r3, [pc, #360]	; (800489c <USBD_CDC_Init+0x1e4>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	f003 020f 	and.w	r2, r3, #15
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	3324      	adds	r3, #36	; 0x24
 8004746:	2201      	movs	r2, #1
 8004748:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800474a:	4b55      	ldr	r3, [pc, #340]	; (80048a0 <USBD_CDC_Init+0x1e8>)
 800474c:	7819      	ldrb	r1, [r3, #0]
 800474e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004752:	2202      	movs	r2, #2
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f002 fab4 	bl	8006cc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800475a:	4b51      	ldr	r3, [pc, #324]	; (80048a0 <USBD_CDC_Init+0x1e8>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	f003 020f 	and.w	r2, r3, #15
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	4613      	mov	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004772:	2201      	movs	r2, #1
 8004774:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004776:	4b4b      	ldr	r3, [pc, #300]	; (80048a4 <USBD_CDC_Init+0x1ec>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	f003 020f 	and.w	r2, r3, #15
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	3326      	adds	r3, #38	; 0x26
 800478c:	2210      	movs	r2, #16
 800478e:	801a      	strh	r2, [r3, #0]
 8004790:	e035      	b.n	80047fe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004792:	4b42      	ldr	r3, [pc, #264]	; (800489c <USBD_CDC_Init+0x1e4>)
 8004794:	7819      	ldrb	r1, [r3, #0]
 8004796:	2340      	movs	r3, #64	; 0x40
 8004798:	2202      	movs	r2, #2
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f002 fa91 	bl	8006cc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80047a0:	4b3e      	ldr	r3, [pc, #248]	; (800489c <USBD_CDC_Init+0x1e4>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	f003 020f 	and.w	r2, r3, #15
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	440b      	add	r3, r1
 80047b4:	3324      	adds	r3, #36	; 0x24
 80047b6:	2201      	movs	r2, #1
 80047b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80047ba:	4b39      	ldr	r3, [pc, #228]	; (80048a0 <USBD_CDC_Init+0x1e8>)
 80047bc:	7819      	ldrb	r1, [r3, #0]
 80047be:	2340      	movs	r3, #64	; 0x40
 80047c0:	2202      	movs	r2, #2
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f002 fa7d 	bl	8006cc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80047c8:	4b35      	ldr	r3, [pc, #212]	; (80048a0 <USBD_CDC_Init+0x1e8>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	f003 020f 	and.w	r2, r3, #15
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80047e0:	2201      	movs	r2, #1
 80047e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80047e4:	4b2f      	ldr	r3, [pc, #188]	; (80048a4 <USBD_CDC_Init+0x1ec>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	f003 020f 	and.w	r2, r3, #15
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	3326      	adds	r3, #38	; 0x26
 80047fa:	2210      	movs	r2, #16
 80047fc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80047fe:	4b29      	ldr	r3, [pc, #164]	; (80048a4 <USBD_CDC_Init+0x1ec>)
 8004800:	7819      	ldrb	r1, [r3, #0]
 8004802:	2308      	movs	r3, #8
 8004804:	2203      	movs	r2, #3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f002 fa5b 	bl	8006cc2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800480c:	4b25      	ldr	r3, [pc, #148]	; (80048a4 <USBD_CDC_Init+0x1ec>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	f003 020f 	and.w	r2, r3, #15
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	3324      	adds	r3, #36	; 0x24
 8004822:	2201      	movs	r2, #1
 8004824:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	33b0      	adds	r3, #176	; 0xb0
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800485c:	2302      	movs	r3, #2
 800485e:	e018      	b.n	8004892 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	7c1b      	ldrb	r3, [r3, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004868:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <USBD_CDC_Init+0x1e8>)
 800486a:	7819      	ldrb	r1, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f002 fb12 	bl	8006ea0 <USBD_LL_PrepareReceive>
 800487c:	e008      	b.n	8004890 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800487e:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <USBD_CDC_Init+0x1e8>)
 8004880:	7819      	ldrb	r1, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004888:	2340      	movs	r3, #64	; 0x40
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f002 fb08 	bl	8006ea0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	20000093 	.word	0x20000093
 80048a0:	20000094 	.word	0x20000094
 80048a4:	20000095 	.word	0x20000095

080048a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80048b4:	4b3a      	ldr	r3, [pc, #232]	; (80049a0 <USBD_CDC_DeInit+0xf8>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	4619      	mov	r1, r3
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f002 fa27 	bl	8006d0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80048c0:	4b37      	ldr	r3, [pc, #220]	; (80049a0 <USBD_CDC_DeInit+0xf8>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	f003 020f 	and.w	r2, r3, #15
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	3324      	adds	r3, #36	; 0x24
 80048d6:	2200      	movs	r2, #0
 80048d8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80048da:	4b32      	ldr	r3, [pc, #200]	; (80049a4 <USBD_CDC_DeInit+0xfc>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	4619      	mov	r1, r3
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f002 fa14 	bl	8006d0e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80048e6:	4b2f      	ldr	r3, [pc, #188]	; (80049a4 <USBD_CDC_DeInit+0xfc>)
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	f003 020f 	and.w	r2, r3, #15
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80048fe:	2200      	movs	r2, #0
 8004900:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004902:	4b29      	ldr	r3, [pc, #164]	; (80049a8 <USBD_CDC_DeInit+0x100>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	4619      	mov	r1, r3
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f002 fa00 	bl	8006d0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800490e:	4b26      	ldr	r3, [pc, #152]	; (80049a8 <USBD_CDC_DeInit+0x100>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	f003 020f 	and.w	r2, r3, #15
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	4613      	mov	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	3324      	adds	r3, #36	; 0x24
 8004924:	2200      	movs	r2, #0
 8004926:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004928:	4b1f      	ldr	r3, [pc, #124]	; (80049a8 <USBD_CDC_DeInit+0x100>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	f003 020f 	and.w	r2, r3, #15
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	4613      	mov	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	3326      	adds	r3, #38	; 0x26
 800493e:	2200      	movs	r2, #0
 8004940:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	32b0      	adds	r2, #176	; 0xb0
 800494c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01f      	beq.n	8004994 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	33b0      	adds	r3, #176	; 0xb0
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	32b0      	adds	r2, #176	; 0xb0
 8004972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004976:	4618      	mov	r0, r3
 8004978:	f002 fad4 	bl	8006f24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	32b0      	adds	r2, #176	; 0xb0
 8004986:	2100      	movs	r1, #0
 8004988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000093 	.word	0x20000093
 80049a4:	20000094 	.word	0x20000094
 80049a8:	20000095 	.word	0x20000095

080049ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	32b0      	adds	r2, #176	; 0xb0
 80049c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80049d8:	2303      	movs	r3, #3
 80049da:	e0bf      	b.n	8004b5c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d050      	beq.n	8004a8a <USBD_CDC_Setup+0xde>
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	f040 80af 	bne.w	8004b4c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	88db      	ldrh	r3, [r3, #6]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d03a      	beq.n	8004a6c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	b25b      	sxtb	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	da1b      	bge.n	8004a38 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	33b0      	adds	r3, #176	; 0xb0
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004a16:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	88d2      	ldrh	r2, [r2, #6]
 8004a1c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	88db      	ldrh	r3, [r3, #6]
 8004a22:	2b07      	cmp	r3, #7
 8004a24:	bf28      	it	cs
 8004a26:	2307      	movcs	r3, #7
 8004a28:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	89fa      	ldrh	r2, [r7, #14]
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f001 fd43 	bl	80064bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004a36:	e090      	b.n	8004b5a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	785a      	ldrb	r2, [r3, #1]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	88db      	ldrh	r3, [r3, #6]
 8004a46:	2b3f      	cmp	r3, #63	; 0x3f
 8004a48:	d803      	bhi.n	8004a52 <USBD_CDC_Setup+0xa6>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	88db      	ldrh	r3, [r3, #6]
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	e000      	b.n	8004a54 <USBD_CDC_Setup+0xa8>
 8004a52:	2240      	movs	r2, #64	; 0x40
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004a5a:	6939      	ldr	r1, [r7, #16]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004a62:	461a      	mov	r2, r3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f001 fd55 	bl	8006514 <USBD_CtlPrepareRx>
      break;
 8004a6a:	e076      	b.n	8004b5a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	33b0      	adds	r3, #176	; 0xb0
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	7850      	ldrb	r0, [r2, #1]
 8004a82:	2200      	movs	r2, #0
 8004a84:	6839      	ldr	r1, [r7, #0]
 8004a86:	4798      	blx	r3
      break;
 8004a88:	e067      	b.n	8004b5a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	785b      	ldrb	r3, [r3, #1]
 8004a8e:	2b0b      	cmp	r3, #11
 8004a90:	d851      	bhi.n	8004b36 <USBD_CDC_Setup+0x18a>
 8004a92:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <USBD_CDC_Setup+0xec>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004ac9 	.word	0x08004ac9
 8004a9c:	08004b45 	.word	0x08004b45
 8004aa0:	08004b37 	.word	0x08004b37
 8004aa4:	08004b37 	.word	0x08004b37
 8004aa8:	08004b37 	.word	0x08004b37
 8004aac:	08004b37 	.word	0x08004b37
 8004ab0:	08004b37 	.word	0x08004b37
 8004ab4:	08004b37 	.word	0x08004b37
 8004ab8:	08004b37 	.word	0x08004b37
 8004abc:	08004b37 	.word	0x08004b37
 8004ac0:	08004af3 	.word	0x08004af3
 8004ac4:	08004b1d 	.word	0x08004b1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d107      	bne.n	8004ae4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004ad4:	f107 030a 	add.w	r3, r7, #10
 8004ad8:	2202      	movs	r2, #2
 8004ada:	4619      	mov	r1, r3
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f001 fced 	bl	80064bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ae2:	e032      	b.n	8004b4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004ae4:	6839      	ldr	r1, [r7, #0]
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f001 fc77 	bl	80063da <USBD_CtlError>
            ret = USBD_FAIL;
 8004aec:	2303      	movs	r3, #3
 8004aee:	75fb      	strb	r3, [r7, #23]
          break;
 8004af0:	e02b      	b.n	8004b4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d107      	bne.n	8004b0e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004afe:	f107 030d 	add.w	r3, r7, #13
 8004b02:	2201      	movs	r2, #1
 8004b04:	4619      	mov	r1, r3
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f001 fcd8 	bl	80064bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004b0c:	e01d      	b.n	8004b4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004b0e:	6839      	ldr	r1, [r7, #0]
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f001 fc62 	bl	80063da <USBD_CtlError>
            ret = USBD_FAIL;
 8004b16:	2303      	movs	r3, #3
 8004b18:	75fb      	strb	r3, [r7, #23]
          break;
 8004b1a:	e016      	b.n	8004b4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d00f      	beq.n	8004b48 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004b28:	6839      	ldr	r1, [r7, #0]
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f001 fc55 	bl	80063da <USBD_CtlError>
            ret = USBD_FAIL;
 8004b30:	2303      	movs	r3, #3
 8004b32:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004b34:	e008      	b.n	8004b48 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004b36:	6839      	ldr	r1, [r7, #0]
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f001 fc4e 	bl	80063da <USBD_CtlError>
          ret = USBD_FAIL;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	75fb      	strb	r3, [r7, #23]
          break;
 8004b42:	e002      	b.n	8004b4a <USBD_CDC_Setup+0x19e>
          break;
 8004b44:	bf00      	nop
 8004b46:	e008      	b.n	8004b5a <USBD_CDC_Setup+0x1ae>
          break;
 8004b48:	bf00      	nop
      }
      break;
 8004b4a:	e006      	b.n	8004b5a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004b4c:	6839      	ldr	r1, [r7, #0]
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f001 fc43 	bl	80063da <USBD_CtlError>
      ret = USBD_FAIL;
 8004b54:	2303      	movs	r3, #3
 8004b56:	75fb      	strb	r3, [r7, #23]
      break;
 8004b58:	bf00      	nop
  }

  return (uint8_t)ret;
 8004b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004b76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	32b0      	adds	r2, #176	; 0xb0
 8004b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e065      	b.n	8004c5a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	32b0      	adds	r2, #176	; 0xb0
 8004b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b9c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004b9e:	78fb      	ldrb	r3, [r7, #3]
 8004ba0:	f003 020f 	and.w	r2, r3, #15
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	3318      	adds	r3, #24
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d02f      	beq.n	8004c18 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	f003 020f 	and.w	r2, r3, #15
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	3318      	adds	r3, #24
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	78fb      	ldrb	r3, [r7, #3]
 8004bd0:	f003 010f 	and.w	r1, r3, #15
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	440b      	add	r3, r1
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4403      	add	r3, r0
 8004be0:	3348      	adds	r3, #72	; 0x48
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	fbb2 f1f3 	udiv	r1, r2, r3
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d112      	bne.n	8004c18 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004bf2:	78fb      	ldrb	r3, [r7, #3]
 8004bf4:	f003 020f 	and.w	r2, r3, #15
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	440b      	add	r3, r1
 8004c04:	3318      	adds	r3, #24
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004c0a:	78f9      	ldrb	r1, [r7, #3]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	2200      	movs	r2, #0
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f002 f924 	bl	8006e5e <USBD_LL_Transmit>
 8004c16:	e01f      	b.n	8004c58 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	33b0      	adds	r3, #176	; 0xb0
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d010      	beq.n	8004c58 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	33b0      	adds	r3, #176	; 0xb0
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004c54:	78fa      	ldrb	r2, [r7, #3]
 8004c56:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b084      	sub	sp, #16
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	32b0      	adds	r2, #176	; 0xb0
 8004c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c7c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	32b0      	adds	r2, #176	; 0xb0
 8004c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e01a      	b.n	8004cca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	4619      	mov	r1, r3
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f002 f922 	bl	8006ee2 <USBD_LL_GetRxDataSize>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	33b0      	adds	r3, #176	; 0xb0
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	32b0      	adds	r2, #176	; 0xb0
 8004ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ce8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e025      	b.n	8004d40 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	33b0      	adds	r3, #176	; 0xb0
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01a      	beq.n	8004d3e <USBD_CDC_EP0_RxReady+0x6c>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004d0e:	2bff      	cmp	r3, #255	; 0xff
 8004d10:	d015      	beq.n	8004d3e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	33b0      	adds	r3, #176	; 0xb0
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004d2a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004d32:	b292      	uxth	r2, r2
 8004d34:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	22ff      	movs	r2, #255	; 0xff
 8004d3a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004d50:	2182      	movs	r1, #130	; 0x82
 8004d52:	4818      	ldr	r0, [pc, #96]	; (8004db4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004d54:	f000 fd09 	bl	800576a <USBD_GetEpDesc>
 8004d58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	4815      	ldr	r0, [pc, #84]	; (8004db4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004d5e:	f000 fd04 	bl	800576a <USBD_GetEpDesc>
 8004d62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004d64:	2181      	movs	r1, #129	; 0x81
 8004d66:	4813      	ldr	r0, [pc, #76]	; (8004db4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004d68:	f000 fcff 	bl	800576a <USBD_GetEpDesc>
 8004d6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2210      	movs	r2, #16
 8004d78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d006      	beq.n	8004d8e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d88:	711a      	strb	r2, [r3, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d006      	beq.n	8004da2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d9c:	711a      	strb	r2, [r3, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2243      	movs	r2, #67	; 0x43
 8004da6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004da8:	4b02      	ldr	r3, [pc, #8]	; (8004db4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000050 	.word	0x20000050

08004db8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004dc0:	2182      	movs	r1, #130	; 0x82
 8004dc2:	4818      	ldr	r0, [pc, #96]	; (8004e24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004dc4:	f000 fcd1 	bl	800576a <USBD_GetEpDesc>
 8004dc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004dca:	2101      	movs	r1, #1
 8004dcc:	4815      	ldr	r0, [pc, #84]	; (8004e24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004dce:	f000 fccc 	bl	800576a <USBD_GetEpDesc>
 8004dd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004dd4:	2181      	movs	r1, #129	; 0x81
 8004dd6:	4813      	ldr	r0, [pc, #76]	; (8004e24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004dd8:	f000 fcc7 	bl	800576a <USBD_GetEpDesc>
 8004ddc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2210      	movs	r2, #16
 8004de8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d006      	beq.n	8004dfe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2200      	movs	r2, #0
 8004df4:	711a      	strb	r2, [r3, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f042 0202 	orr.w	r2, r2, #2
 8004dfc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d006      	beq.n	8004e12 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	711a      	strb	r2, [r3, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f042 0202 	orr.w	r2, r2, #2
 8004e10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2243      	movs	r2, #67	; 0x43
 8004e16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004e18:	4b02      	ldr	r3, [pc, #8]	; (8004e24 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20000050 	.word	0x20000050

08004e28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004e30:	2182      	movs	r1, #130	; 0x82
 8004e32:	4818      	ldr	r0, [pc, #96]	; (8004e94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004e34:	f000 fc99 	bl	800576a <USBD_GetEpDesc>
 8004e38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	4815      	ldr	r0, [pc, #84]	; (8004e94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004e3e:	f000 fc94 	bl	800576a <USBD_GetEpDesc>
 8004e42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004e44:	2181      	movs	r1, #129	; 0x81
 8004e46:	4813      	ldr	r0, [pc, #76]	; (8004e94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004e48:	f000 fc8f 	bl	800576a <USBD_GetEpDesc>
 8004e4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2210      	movs	r2, #16
 8004e58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d006      	beq.n	8004e6e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e68:	711a      	strb	r2, [r3, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d006      	beq.n	8004e82 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e7c:	711a      	strb	r2, [r3, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2243      	movs	r2, #67	; 0x43
 8004e86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004e88:	4b02      	ldr	r3, [pc, #8]	; (8004e94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000050 	.word	0x20000050

08004e98 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	220a      	movs	r2, #10
 8004ea4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004ea6:	4b03      	ldr	r3, [pc, #12]	; (8004eb4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	2000000c 	.word	0x2000000c

08004eb8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e009      	b.n	8004ee0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	33b0      	adds	r3, #176	; 0xb0
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	32b0      	adds	r2, #176	; 0xb0
 8004f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f06:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e008      	b.n	8004f24 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	371c      	adds	r7, #28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	32b0      	adds	r2, #176	; 0xb0
 8004f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e004      	b.n	8004f5e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
	...

08004f6c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	32b0      	adds	r2, #176	; 0xb0
 8004f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f82:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	32b0      	adds	r2, #176	; 0xb0
 8004f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e018      	b.n	8004fcc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	7c1b      	ldrb	r3, [r3, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <USBD_CDC_ReceivePacket+0x68>)
 8004fa4:	7819      	ldrb	r1, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f001 ff75 	bl	8006ea0 <USBD_LL_PrepareReceive>
 8004fb6:	e008      	b.n	8004fca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004fb8:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <USBD_CDC_ReceivePacket+0x68>)
 8004fba:	7819      	ldrb	r1, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fc2:	2340      	movs	r3, #64	; 0x40
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f001 ff6b 	bl	8006ea0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20000094 	.word	0x20000094

08004fd8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e01f      	b.n	8005030 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	79fa      	ldrb	r2, [r7, #7]
 8005022:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f001 fde5 	bl	8006bf4 <USBD_LL_Init>
 800502a:	4603      	mov	r3, r0
 800502c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800502e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800504c:	2303      	movs	r3, #3
 800504e:	e025      	b.n	800509c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	32ae      	adds	r2, #174	; 0xae
 8005062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00f      	beq.n	800508c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	32ae      	adds	r2, #174	; 0xae
 8005076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	f107 020e 	add.w	r2, r7, #14
 8005080:	4610      	mov	r0, r2
 8005082:	4798      	blx	r3
 8005084:	4602      	mov	r2, r0
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f001 fded 	bl	8006c8c <USBD_LL_Start>
 80050b2:	4603      	mov	r3, r0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80050c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b084      	sub	sp, #16
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	460b      	mov	r3, r1
 80050dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d009      	beq.n	8005100 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	78fa      	ldrb	r2, [r7, #3]
 80050f6:	4611      	mov	r1, r2
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	4798      	blx	r3
 80050fc:	4603      	mov	r3, r0
 80050fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005100:	7bfb      	ldrb	r3, [r7, #15]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	460b      	mov	r3, r1
 8005114:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	78fa      	ldrb	r2, [r7, #3]
 8005124:	4611      	mov	r1, r2
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	4798      	blx	r3
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005130:	2303      	movs	r3, #3
 8005132:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005134:	7bfb      	ldrb	r3, [r7, #15]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800514e:	6839      	ldr	r1, [r7, #0]
 8005150:	4618      	mov	r0, r3
 8005152:	f001 f908 	bl	8006366 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005164:	461a      	mov	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005172:	f003 031f 	and.w	r3, r3, #31
 8005176:	2b02      	cmp	r3, #2
 8005178:	d01a      	beq.n	80051b0 <USBD_LL_SetupStage+0x72>
 800517a:	2b02      	cmp	r3, #2
 800517c:	d822      	bhi.n	80051c4 <USBD_LL_SetupStage+0x86>
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <USBD_LL_SetupStage+0x4a>
 8005182:	2b01      	cmp	r3, #1
 8005184:	d00a      	beq.n	800519c <USBD_LL_SetupStage+0x5e>
 8005186:	e01d      	b.n	80051c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800518e:	4619      	mov	r1, r3
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fb5f 	bl	8005854 <USBD_StdDevReq>
 8005196:	4603      	mov	r3, r0
 8005198:	73fb      	strb	r3, [r7, #15]
      break;
 800519a:	e020      	b.n	80051de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051a2:	4619      	mov	r1, r3
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fbc7 	bl	8005938 <USBD_StdItfReq>
 80051aa:	4603      	mov	r3, r0
 80051ac:	73fb      	strb	r3, [r7, #15]
      break;
 80051ae:	e016      	b.n	80051de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051b6:	4619      	mov	r1, r3
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fc29 	bl	8005a10 <USBD_StdEPReq>
 80051be:	4603      	mov	r3, r0
 80051c0:	73fb      	strb	r3, [r7, #15]
      break;
 80051c2:	e00c      	b.n	80051de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80051ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	4619      	mov	r1, r3
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f001 fdba 	bl	8006d4c <USBD_LL_StallEP>
 80051d8:	4603      	mov	r3, r0
 80051da:	73fb      	strb	r3, [r7, #15]
      break;
 80051dc:	bf00      	nop
  }

  return ret;
 80051de:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	460b      	mov	r3, r1
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80051fa:	7afb      	ldrb	r3, [r7, #11]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d16e      	bne.n	80052de <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005206:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800520e:	2b03      	cmp	r3, #3
 8005210:	f040 8098 	bne.w	8005344 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	429a      	cmp	r2, r3
 800521e:	d913      	bls.n	8005248 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	1ad2      	subs	r2, r2, r3
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	4293      	cmp	r3, r2
 8005238:	bf28      	it	cs
 800523a:	4613      	movcs	r3, r2
 800523c:	461a      	mov	r2, r3
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f001 f984 	bl	800654e <USBD_CtlContinueRx>
 8005246:	e07d      	b.n	8005344 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800524e:	f003 031f 	and.w	r3, r3, #31
 8005252:	2b02      	cmp	r3, #2
 8005254:	d014      	beq.n	8005280 <USBD_LL_DataOutStage+0x98>
 8005256:	2b02      	cmp	r3, #2
 8005258:	d81d      	bhi.n	8005296 <USBD_LL_DataOutStage+0xae>
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <USBD_LL_DataOutStage+0x7c>
 800525e:	2b01      	cmp	r3, #1
 8005260:	d003      	beq.n	800526a <USBD_LL_DataOutStage+0x82>
 8005262:	e018      	b.n	8005296 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	75bb      	strb	r3, [r7, #22]
            break;
 8005268:	e018      	b.n	800529c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005270:	b2db      	uxtb	r3, r3
 8005272:	4619      	mov	r1, r3
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 fa5e 	bl	8005736 <USBD_CoreFindIF>
 800527a:	4603      	mov	r3, r0
 800527c:	75bb      	strb	r3, [r7, #22]
            break;
 800527e:	e00d      	b.n	800529c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005286:	b2db      	uxtb	r3, r3
 8005288:	4619      	mov	r1, r3
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 fa60 	bl	8005750 <USBD_CoreFindEP>
 8005290:	4603      	mov	r3, r0
 8005292:	75bb      	strb	r3, [r7, #22]
            break;
 8005294:	e002      	b.n	800529c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	75bb      	strb	r3, [r7, #22]
            break;
 800529a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800529c:	7dbb      	ldrb	r3, [r7, #22]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d119      	bne.n	80052d6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d113      	bne.n	80052d6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80052ae:	7dba      	ldrb	r2, [r7, #22]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	32ae      	adds	r2, #174	; 0xae
 80052b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00b      	beq.n	80052d6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80052be:	7dba      	ldrb	r2, [r7, #22]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80052c6:	7dba      	ldrb	r2, [r7, #22]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	32ae      	adds	r2, #174	; 0xae
 80052cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f001 f94a 	bl	8006570 <USBD_CtlSendStatus>
 80052dc:	e032      	b.n	8005344 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80052de:	7afb      	ldrb	r3, [r7, #11]
 80052e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	4619      	mov	r1, r3
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 fa31 	bl	8005750 <USBD_CoreFindEP>
 80052ee:	4603      	mov	r3, r0
 80052f0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80052f2:	7dbb      	ldrb	r3, [r7, #22]
 80052f4:	2bff      	cmp	r3, #255	; 0xff
 80052f6:	d025      	beq.n	8005344 <USBD_LL_DataOutStage+0x15c>
 80052f8:	7dbb      	ldrb	r3, [r7, #22]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d122      	bne.n	8005344 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b03      	cmp	r3, #3
 8005308:	d117      	bne.n	800533a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800530a:	7dba      	ldrb	r2, [r7, #22]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	32ae      	adds	r2, #174	; 0xae
 8005310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00f      	beq.n	800533a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800531a:	7dba      	ldrb	r2, [r7, #22]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005322:	7dba      	ldrb	r2, [r7, #22]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	32ae      	adds	r2, #174	; 0xae
 8005328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	7afa      	ldrb	r2, [r7, #11]
 8005330:	4611      	mov	r1, r2
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	4798      	blx	r3
 8005336:	4603      	mov	r3, r0
 8005338:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800533a:	7dfb      	ldrb	r3, [r7, #23]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005340:	7dfb      	ldrb	r3, [r7, #23]
 8005342:	e000      	b.n	8005346 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b086      	sub	sp, #24
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	460b      	mov	r3, r1
 8005358:	607a      	str	r2, [r7, #4]
 800535a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800535c:	7afb      	ldrb	r3, [r7, #11]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d16f      	bne.n	8005442 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	3314      	adds	r3, #20
 8005366:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800536e:	2b02      	cmp	r3, #2
 8005370:	d15a      	bne.n	8005428 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	429a      	cmp	r2, r3
 800537c:	d914      	bls.n	80053a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	1ad2      	subs	r2, r2, r3
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	461a      	mov	r2, r3
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f001 f8ac 	bl	80064f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800539a:	2300      	movs	r3, #0
 800539c:	2200      	movs	r2, #0
 800539e:	2100      	movs	r1, #0
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f001 fd7d 	bl	8006ea0 <USBD_LL_PrepareReceive>
 80053a6:	e03f      	b.n	8005428 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d11c      	bne.n	80053ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80053bc:	429a      	cmp	r2, r3
 80053be:	d316      	bcc.n	80053ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d20f      	bcs.n	80053ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80053ce:	2200      	movs	r2, #0
 80053d0:	2100      	movs	r1, #0
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f001 f88d 	bl	80064f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053e0:	2300      	movs	r3, #0
 80053e2:	2200      	movs	r2, #0
 80053e4:	2100      	movs	r1, #0
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f001 fd5a 	bl	8006ea0 <USBD_LL_PrepareReceive>
 80053ec:	e01c      	b.n	8005428 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b03      	cmp	r3, #3
 80053f8:	d10f      	bne.n	800541a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800541a:	2180      	movs	r1, #128	; 0x80
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f001 fc95 	bl	8006d4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f001 f8b7 	bl	8006596 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d03a      	beq.n	80054a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f7ff fe42 	bl	80050bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005440:	e032      	b.n	80054a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005442:	7afb      	ldrb	r3, [r7, #11]
 8005444:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005448:	b2db      	uxtb	r3, r3
 800544a:	4619      	mov	r1, r3
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f97f 	bl	8005750 <USBD_CoreFindEP>
 8005452:	4603      	mov	r3, r0
 8005454:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005456:	7dfb      	ldrb	r3, [r7, #23]
 8005458:	2bff      	cmp	r3, #255	; 0xff
 800545a:	d025      	beq.n	80054a8 <USBD_LL_DataInStage+0x15a>
 800545c:	7dfb      	ldrb	r3, [r7, #23]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d122      	bne.n	80054a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b03      	cmp	r3, #3
 800546c:	d11c      	bne.n	80054a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800546e:	7dfa      	ldrb	r2, [r7, #23]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	32ae      	adds	r2, #174	; 0xae
 8005474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d014      	beq.n	80054a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800547e:	7dfa      	ldrb	r2, [r7, #23]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005486:	7dfa      	ldrb	r2, [r7, #23]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	32ae      	adds	r2, #174	; 0xae
 800548c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	7afa      	ldrb	r2, [r7, #11]
 8005494:	4611      	mov	r1, r2
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	4798      	blx	r3
 800549a:	4603      	mov	r3, r0
 800549c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800549e:	7dbb      	ldrb	r3, [r7, #22]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80054a4:	7dbb      	ldrb	r3, [r7, #22]
 80054a6:	e000      	b.n	80054aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d014      	beq.n	8005518 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00e      	beq.n	8005518 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6852      	ldr	r2, [r2, #4]
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	4611      	mov	r1, r2
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4798      	blx	r3
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005514:	2303      	movs	r3, #3
 8005516:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005518:	2340      	movs	r3, #64	; 0x40
 800551a:	2200      	movs	r2, #0
 800551c:	2100      	movs	r1, #0
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f001 fbcf 	bl	8006cc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2240      	movs	r2, #64	; 0x40
 8005530:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005534:	2340      	movs	r3, #64	; 0x40
 8005536:	2200      	movs	r2, #0
 8005538:	2180      	movs	r1, #128	; 0x80
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f001 fbc1 	bl	8006cc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2240      	movs	r2, #64	; 0x40
 800554a:	621a      	str	r2, [r3, #32]

  return ret;
 800554c:	7bfb      	ldrb	r3, [r7, #15]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	460b      	mov	r3, r1
 8005560:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	78fa      	ldrb	r2, [r7, #3]
 8005566:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005584:	b2da      	uxtb	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2204      	movs	r2, #4
 8005590:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d106      	bne.n	80055c4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d110      	bne.n	8005608 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00b      	beq.n	8005608 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b082      	sub	sp, #8
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	460b      	mov	r3, r1
 800561c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	32ae      	adds	r2, #174	; 0xae
 8005628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005630:	2303      	movs	r3, #3
 8005632:	e01c      	b.n	800566e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b03      	cmp	r3, #3
 800563e:	d115      	bne.n	800566c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	32ae      	adds	r2, #174	; 0xae
 800564a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00b      	beq.n	800566c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	32ae      	adds	r2, #174	; 0xae
 800565e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	78fa      	ldrb	r2, [r7, #3]
 8005666:	4611      	mov	r1, r2
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	460b      	mov	r3, r1
 8005680:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	32ae      	adds	r2, #174	; 0xae
 800568c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005694:	2303      	movs	r3, #3
 8005696:	e01c      	b.n	80056d2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d115      	bne.n	80056d0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	32ae      	adds	r2, #174	; 0xae
 80056ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00b      	beq.n	80056d0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	32ae      	adds	r2, #174	; 0xae
 80056c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	78fa      	ldrb	r2, [r7, #3]
 80056ca:	4611      	mov	r1, r2
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80056f8:	2300      	movs	r3, #0
 80056fa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00e      	beq.n	800572c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6852      	ldr	r2, [r2, #4]
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	4611      	mov	r1, r2
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	4798      	blx	r3
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005728:	2303      	movs	r3, #3
 800572a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800572c:	7bfb      	ldrb	r3, [r7, #15]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005736:	b480      	push	{r7}
 8005738:	b083      	sub	sp, #12
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	460b      	mov	r3, r1
 8005740:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005742:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005744:	4618      	mov	r0, r3
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800575c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800575e:	4618      	mov	r0, r3
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b086      	sub	sp, #24
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	460b      	mov	r3, r1
 8005774:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800577e:	2300      	movs	r3, #0
 8005780:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	885b      	ldrh	r3, [r3, #2]
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	b29b      	uxth	r3, r3
 800578e:	429a      	cmp	r2, r3
 8005790:	d920      	bls.n	80057d4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800579a:	e013      	b.n	80057c4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800579c:	f107 030a 	add.w	r3, r7, #10
 80057a0:	4619      	mov	r1, r3
 80057a2:	6978      	ldr	r0, [r7, #20]
 80057a4:	f000 f81b 	bl	80057de <USBD_GetNextDesc>
 80057a8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	785b      	ldrb	r3, [r3, #1]
 80057ae:	2b05      	cmp	r3, #5
 80057b0:	d108      	bne.n	80057c4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	789b      	ldrb	r3, [r3, #2]
 80057ba:	78fa      	ldrb	r2, [r7, #3]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d008      	beq.n	80057d2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	885b      	ldrh	r3, [r3, #2]
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	897b      	ldrh	r3, [r7, #10]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d8e5      	bhi.n	800579c <USBD_GetEpDesc+0x32>
 80057d0:	e000      	b.n	80057d4 <USBD_GetEpDesc+0x6a>
          break;
 80057d2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80057d4:	693b      	ldr	r3, [r7, #16]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80057de:	b480      	push	{r7}
 80057e0:	b085      	sub	sp, #20
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	881a      	ldrh	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	4413      	add	r3, r2
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4413      	add	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800580a:	68fb      	ldr	r3, [r7, #12]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	3301      	adds	r3, #1
 800582e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005836:	8a3b      	ldrh	r3, [r7, #16]
 8005838:	021b      	lsls	r3, r3, #8
 800583a:	b21a      	sxth	r2, r3
 800583c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005840:	4313      	orrs	r3, r2
 8005842:	b21b      	sxth	r3, r3
 8005844:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005846:	89fb      	ldrh	r3, [r7, #14]
}
 8005848:	4618      	mov	r0, r3
 800584a:	371c      	adds	r7, #28
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800586a:	2b40      	cmp	r3, #64	; 0x40
 800586c:	d005      	beq.n	800587a <USBD_StdDevReq+0x26>
 800586e:	2b40      	cmp	r3, #64	; 0x40
 8005870:	d857      	bhi.n	8005922 <USBD_StdDevReq+0xce>
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00f      	beq.n	8005896 <USBD_StdDevReq+0x42>
 8005876:	2b20      	cmp	r3, #32
 8005878:	d153      	bne.n	8005922 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	32ae      	adds	r2, #174	; 0xae
 8005884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	6839      	ldr	r1, [r7, #0]
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	4798      	blx	r3
 8005890:	4603      	mov	r3, r0
 8005892:	73fb      	strb	r3, [r7, #15]
      break;
 8005894:	e04a      	b.n	800592c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	785b      	ldrb	r3, [r3, #1]
 800589a:	2b09      	cmp	r3, #9
 800589c:	d83b      	bhi.n	8005916 <USBD_StdDevReq+0xc2>
 800589e:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <USBD_StdDevReq+0x50>)
 80058a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a4:	080058f9 	.word	0x080058f9
 80058a8:	0800590d 	.word	0x0800590d
 80058ac:	08005917 	.word	0x08005917
 80058b0:	08005903 	.word	0x08005903
 80058b4:	08005917 	.word	0x08005917
 80058b8:	080058d7 	.word	0x080058d7
 80058bc:	080058cd 	.word	0x080058cd
 80058c0:	08005917 	.word	0x08005917
 80058c4:	080058ef 	.word	0x080058ef
 80058c8:	080058e1 	.word	0x080058e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80058cc:	6839      	ldr	r1, [r7, #0]
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fa3c 	bl	8005d4c <USBD_GetDescriptor>
          break;
 80058d4:	e024      	b.n	8005920 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fba1 	bl	8006020 <USBD_SetAddress>
          break;
 80058de:	e01f      	b.n	8005920 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fbe0 	bl	80060a8 <USBD_SetConfig>
 80058e8:	4603      	mov	r3, r0
 80058ea:	73fb      	strb	r3, [r7, #15]
          break;
 80058ec:	e018      	b.n	8005920 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80058ee:	6839      	ldr	r1, [r7, #0]
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fc83 	bl	80061fc <USBD_GetConfig>
          break;
 80058f6:	e013      	b.n	8005920 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80058f8:	6839      	ldr	r1, [r7, #0]
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fcb4 	bl	8006268 <USBD_GetStatus>
          break;
 8005900:	e00e      	b.n	8005920 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005902:	6839      	ldr	r1, [r7, #0]
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fce3 	bl	80062d0 <USBD_SetFeature>
          break;
 800590a:	e009      	b.n	8005920 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800590c:	6839      	ldr	r1, [r7, #0]
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 fd07 	bl	8006322 <USBD_ClrFeature>
          break;
 8005914:	e004      	b.n	8005920 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005916:	6839      	ldr	r1, [r7, #0]
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fd5e 	bl	80063da <USBD_CtlError>
          break;
 800591e:	bf00      	nop
      }
      break;
 8005920:	e004      	b.n	800592c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005922:	6839      	ldr	r1, [r7, #0]
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 fd58 	bl	80063da <USBD_CtlError>
      break;
 800592a:	bf00      	nop
  }

  return ret;
 800592c:	7bfb      	ldrb	r3, [r7, #15]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop

08005938 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800594e:	2b40      	cmp	r3, #64	; 0x40
 8005950:	d005      	beq.n	800595e <USBD_StdItfReq+0x26>
 8005952:	2b40      	cmp	r3, #64	; 0x40
 8005954:	d852      	bhi.n	80059fc <USBD_StdItfReq+0xc4>
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <USBD_StdItfReq+0x26>
 800595a:	2b20      	cmp	r3, #32
 800595c:	d14e      	bne.n	80059fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005964:	b2db      	uxtb	r3, r3
 8005966:	3b01      	subs	r3, #1
 8005968:	2b02      	cmp	r3, #2
 800596a:	d840      	bhi.n	80059ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	889b      	ldrh	r3, [r3, #4]
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b01      	cmp	r3, #1
 8005974:	d836      	bhi.n	80059e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	889b      	ldrh	r3, [r3, #4]
 800597a:	b2db      	uxtb	r3, r3
 800597c:	4619      	mov	r1, r3
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff fed9 	bl	8005736 <USBD_CoreFindIF>
 8005984:	4603      	mov	r3, r0
 8005986:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005988:	7bbb      	ldrb	r3, [r7, #14]
 800598a:	2bff      	cmp	r3, #255	; 0xff
 800598c:	d01d      	beq.n	80059ca <USBD_StdItfReq+0x92>
 800598e:	7bbb      	ldrb	r3, [r7, #14]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d11a      	bne.n	80059ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005994:	7bba      	ldrb	r2, [r7, #14]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	32ae      	adds	r2, #174	; 0xae
 800599a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00f      	beq.n	80059c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80059a4:	7bba      	ldrb	r2, [r7, #14]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80059ac:	7bba      	ldrb	r2, [r7, #14]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	32ae      	adds	r2, #174	; 0xae
 80059b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	6839      	ldr	r1, [r7, #0]
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
 80059be:	4603      	mov	r3, r0
 80059c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80059c2:	e004      	b.n	80059ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80059c4:	2303      	movs	r3, #3
 80059c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80059c8:	e001      	b.n	80059ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80059ca:	2303      	movs	r3, #3
 80059cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	88db      	ldrh	r3, [r3, #6]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d110      	bne.n	80059f8 <USBD_StdItfReq+0xc0>
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10d      	bne.n	80059f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fdc7 	bl	8006570 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80059e2:	e009      	b.n	80059f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80059e4:	6839      	ldr	r1, [r7, #0]
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fcf7 	bl	80063da <USBD_CtlError>
          break;
 80059ec:	e004      	b.n	80059f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80059ee:	6839      	ldr	r1, [r7, #0]
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fcf2 	bl	80063da <USBD_CtlError>
          break;
 80059f6:	e000      	b.n	80059fa <USBD_StdItfReq+0xc2>
          break;
 80059f8:	bf00      	nop
      }
      break;
 80059fa:	e004      	b.n	8005a06 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fceb 	bl	80063da <USBD_CtlError>
      break;
 8005a04:	bf00      	nop
  }

  return ret;
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	889b      	ldrh	r3, [r3, #4]
 8005a22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a2c:	2b40      	cmp	r3, #64	; 0x40
 8005a2e:	d007      	beq.n	8005a40 <USBD_StdEPReq+0x30>
 8005a30:	2b40      	cmp	r3, #64	; 0x40
 8005a32:	f200 817f 	bhi.w	8005d34 <USBD_StdEPReq+0x324>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d02a      	beq.n	8005a90 <USBD_StdEPReq+0x80>
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	f040 817a 	bne.w	8005d34 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005a40:	7bbb      	ldrb	r3, [r7, #14]
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7ff fe83 	bl	8005750 <USBD_CoreFindEP>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a4e:	7b7b      	ldrb	r3, [r7, #13]
 8005a50:	2bff      	cmp	r3, #255	; 0xff
 8005a52:	f000 8174 	beq.w	8005d3e <USBD_StdEPReq+0x32e>
 8005a56:	7b7b      	ldrb	r3, [r7, #13]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f040 8170 	bne.w	8005d3e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005a5e:	7b7a      	ldrb	r2, [r7, #13]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005a66:	7b7a      	ldrb	r2, [r7, #13]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	32ae      	adds	r2, #174	; 0xae
 8005a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 8163 	beq.w	8005d3e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005a78:	7b7a      	ldrb	r2, [r7, #13]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	32ae      	adds	r2, #174	; 0xae
 8005a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	4798      	blx	r3
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a8e:	e156      	b.n	8005d3e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	2b03      	cmp	r3, #3
 8005a96:	d008      	beq.n	8005aaa <USBD_StdEPReq+0x9a>
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	f300 8145 	bgt.w	8005d28 <USBD_StdEPReq+0x318>
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 809b 	beq.w	8005bda <USBD_StdEPReq+0x1ca>
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d03c      	beq.n	8005b22 <USBD_StdEPReq+0x112>
 8005aa8:	e13e      	b.n	8005d28 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d002      	beq.n	8005abc <USBD_StdEPReq+0xac>
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d016      	beq.n	8005ae8 <USBD_StdEPReq+0xd8>
 8005aba:	e02c      	b.n	8005b16 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005abc:	7bbb      	ldrb	r3, [r7, #14]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00d      	beq.n	8005ade <USBD_StdEPReq+0xce>
 8005ac2:	7bbb      	ldrb	r3, [r7, #14]
 8005ac4:	2b80      	cmp	r3, #128	; 0x80
 8005ac6:	d00a      	beq.n	8005ade <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ac8:	7bbb      	ldrb	r3, [r7, #14]
 8005aca:	4619      	mov	r1, r3
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f001 f93d 	bl	8006d4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ad2:	2180      	movs	r1, #128	; 0x80
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f001 f939 	bl	8006d4c <USBD_LL_StallEP>
 8005ada:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005adc:	e020      	b.n	8005b20 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005ade:	6839      	ldr	r1, [r7, #0]
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fc7a 	bl	80063da <USBD_CtlError>
              break;
 8005ae6:	e01b      	b.n	8005b20 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	885b      	ldrh	r3, [r3, #2]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10e      	bne.n	8005b0e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005af0:	7bbb      	ldrb	r3, [r7, #14]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00b      	beq.n	8005b0e <USBD_StdEPReq+0xfe>
 8005af6:	7bbb      	ldrb	r3, [r7, #14]
 8005af8:	2b80      	cmp	r3, #128	; 0x80
 8005afa:	d008      	beq.n	8005b0e <USBD_StdEPReq+0xfe>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	88db      	ldrh	r3, [r3, #6]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d104      	bne.n	8005b0e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b04:	7bbb      	ldrb	r3, [r7, #14]
 8005b06:	4619      	mov	r1, r3
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f001 f91f 	bl	8006d4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fd2e 	bl	8006570 <USBD_CtlSendStatus>

              break;
 8005b14:	e004      	b.n	8005b20 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fc5e 	bl	80063da <USBD_CtlError>
              break;
 8005b1e:	bf00      	nop
          }
          break;
 8005b20:	e107      	b.n	8005d32 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d002      	beq.n	8005b34 <USBD_StdEPReq+0x124>
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d016      	beq.n	8005b60 <USBD_StdEPReq+0x150>
 8005b32:	e04b      	b.n	8005bcc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b34:	7bbb      	ldrb	r3, [r7, #14]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00d      	beq.n	8005b56 <USBD_StdEPReq+0x146>
 8005b3a:	7bbb      	ldrb	r3, [r7, #14]
 8005b3c:	2b80      	cmp	r3, #128	; 0x80
 8005b3e:	d00a      	beq.n	8005b56 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b40:	7bbb      	ldrb	r3, [r7, #14]
 8005b42:	4619      	mov	r1, r3
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f001 f901 	bl	8006d4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b4a:	2180      	movs	r1, #128	; 0x80
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f001 f8fd 	bl	8006d4c <USBD_LL_StallEP>
 8005b52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b54:	e040      	b.n	8005bd8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005b56:	6839      	ldr	r1, [r7, #0]
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fc3e 	bl	80063da <USBD_CtlError>
              break;
 8005b5e:	e03b      	b.n	8005bd8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	885b      	ldrh	r3, [r3, #2]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d136      	bne.n	8005bd6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005b68:	7bbb      	ldrb	r3, [r7, #14]
 8005b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005b72:	7bbb      	ldrb	r3, [r7, #14]
 8005b74:	4619      	mov	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f001 f907 	bl	8006d8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fcf7 	bl	8006570 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005b82:	7bbb      	ldrb	r3, [r7, #14]
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7ff fde2 	bl	8005750 <USBD_CoreFindEP>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b90:	7b7b      	ldrb	r3, [r7, #13]
 8005b92:	2bff      	cmp	r3, #255	; 0xff
 8005b94:	d01f      	beq.n	8005bd6 <USBD_StdEPReq+0x1c6>
 8005b96:	7b7b      	ldrb	r3, [r7, #13]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d11c      	bne.n	8005bd6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005b9c:	7b7a      	ldrb	r2, [r7, #13]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005ba4:	7b7a      	ldrb	r2, [r7, #13]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	32ae      	adds	r2, #174	; 0xae
 8005baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d010      	beq.n	8005bd6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005bb4:	7b7a      	ldrb	r2, [r7, #13]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	32ae      	adds	r2, #174	; 0xae
 8005bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	6839      	ldr	r1, [r7, #0]
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	4798      	blx	r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005bca:	e004      	b.n	8005bd6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fc03 	bl	80063da <USBD_CtlError>
              break;
 8005bd4:	e000      	b.n	8005bd8 <USBD_StdEPReq+0x1c8>
              break;
 8005bd6:	bf00      	nop
          }
          break;
 8005bd8:	e0ab      	b.n	8005d32 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d002      	beq.n	8005bec <USBD_StdEPReq+0x1dc>
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d032      	beq.n	8005c50 <USBD_StdEPReq+0x240>
 8005bea:	e097      	b.n	8005d1c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bec:	7bbb      	ldrb	r3, [r7, #14]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d007      	beq.n	8005c02 <USBD_StdEPReq+0x1f2>
 8005bf2:	7bbb      	ldrb	r3, [r7, #14]
 8005bf4:	2b80      	cmp	r3, #128	; 0x80
 8005bf6:	d004      	beq.n	8005c02 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fbed 	bl	80063da <USBD_CtlError>
                break;
 8005c00:	e091      	b.n	8005d26 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	da0b      	bge.n	8005c22 <USBD_StdEPReq+0x212>
 8005c0a:	7bbb      	ldrb	r3, [r7, #14]
 8005c0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	3310      	adds	r3, #16
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	3304      	adds	r3, #4
 8005c20:	e00b      	b.n	8005c3a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c22:	7bbb      	ldrb	r3, [r7, #14]
 8005c24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	4413      	add	r3, r2
 8005c38:	3304      	adds	r3, #4
 8005c3a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2202      	movs	r2, #2
 8005c46:	4619      	mov	r1, r3
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fc37 	bl	80064bc <USBD_CtlSendData>
              break;
 8005c4e:	e06a      	b.n	8005d26 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005c50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	da11      	bge.n	8005c7c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005c58:	7bbb      	ldrb	r3, [r7, #14]
 8005c5a:	f003 020f 	and.w	r2, r3, #15
 8005c5e:	6879      	ldr	r1, [r7, #4]
 8005c60:	4613      	mov	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	440b      	add	r3, r1
 8005c6a:	3324      	adds	r3, #36	; 0x24
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d117      	bne.n	8005ca2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fbb0 	bl	80063da <USBD_CtlError>
                  break;
 8005c7a:	e054      	b.n	8005d26 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005c7c:	7bbb      	ldrb	r3, [r7, #14]
 8005c7e:	f003 020f 	and.w	r2, r3, #15
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	4613      	mov	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	440b      	add	r3, r1
 8005c8e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d104      	bne.n	8005ca2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fb9d 	bl	80063da <USBD_CtlError>
                  break;
 8005ca0:	e041      	b.n	8005d26 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ca2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	da0b      	bge.n	8005cc2 <USBD_StdEPReq+0x2b2>
 8005caa:	7bbb      	ldrb	r3, [r7, #14]
 8005cac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	3310      	adds	r3, #16
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	e00b      	b.n	8005cda <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005cc2:	7bbb      	ldrb	r3, [r7, #14]
 8005cc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	3304      	adds	r3, #4
 8005cda:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005cdc:	7bbb      	ldrb	r3, [r7, #14]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <USBD_StdEPReq+0x2d8>
 8005ce2:	7bbb      	ldrb	r3, [r7, #14]
 8005ce4:	2b80      	cmp	r3, #128	; 0x80
 8005ce6:	d103      	bne.n	8005cf0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	e00e      	b.n	8005d0e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005cf0:	7bbb      	ldrb	r3, [r7, #14]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f001 f867 	bl	8006dc8 <USBD_LL_IsStallEP>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2201      	movs	r2, #1
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	e002      	b.n	8005d0e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2202      	movs	r2, #2
 8005d12:	4619      	mov	r1, r3
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fbd1 	bl	80064bc <USBD_CtlSendData>
              break;
 8005d1a:	e004      	b.n	8005d26 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005d1c:	6839      	ldr	r1, [r7, #0]
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fb5b 	bl	80063da <USBD_CtlError>
              break;
 8005d24:	bf00      	nop
          }
          break;
 8005d26:	e004      	b.n	8005d32 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fb55 	bl	80063da <USBD_CtlError>
          break;
 8005d30:	bf00      	nop
      }
      break;
 8005d32:	e005      	b.n	8005d40 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fb4f 	bl	80063da <USBD_CtlError>
      break;
 8005d3c:	e000      	b.n	8005d40 <USBD_StdEPReq+0x330>
      break;
 8005d3e:	bf00      	nop
  }

  return ret;
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
	...

08005d4c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d56:	2300      	movs	r3, #0
 8005d58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	885b      	ldrh	r3, [r3, #2]
 8005d66:	0a1b      	lsrs	r3, r3, #8
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	2b06      	cmp	r3, #6
 8005d6e:	f200 8128 	bhi.w	8005fc2 <USBD_GetDescriptor+0x276>
 8005d72:	a201      	add	r2, pc, #4	; (adr r2, 8005d78 <USBD_GetDescriptor+0x2c>)
 8005d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d78:	08005d95 	.word	0x08005d95
 8005d7c:	08005dad 	.word	0x08005dad
 8005d80:	08005ded 	.word	0x08005ded
 8005d84:	08005fc3 	.word	0x08005fc3
 8005d88:	08005fc3 	.word	0x08005fc3
 8005d8c:	08005f63 	.word	0x08005f63
 8005d90:	08005f8f 	.word	0x08005f8f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	7c12      	ldrb	r2, [r2, #16]
 8005da0:	f107 0108 	add.w	r1, r7, #8
 8005da4:	4610      	mov	r0, r2
 8005da6:	4798      	blx	r3
 8005da8:	60f8      	str	r0, [r7, #12]
      break;
 8005daa:	e112      	b.n	8005fd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	7c1b      	ldrb	r3, [r3, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10d      	bne.n	8005dd0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbc:	f107 0208 	add.w	r2, r7, #8
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	4798      	blx	r3
 8005dc4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	2202      	movs	r2, #2
 8005dcc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005dce:	e100      	b.n	8005fd2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	f107 0208 	add.w	r2, r7, #8
 8005ddc:	4610      	mov	r0, r2
 8005dde:	4798      	blx	r3
 8005de0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3301      	adds	r3, #1
 8005de6:	2202      	movs	r2, #2
 8005de8:	701a      	strb	r2, [r3, #0]
      break;
 8005dea:	e0f2      	b.n	8005fd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	885b      	ldrh	r3, [r3, #2]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b05      	cmp	r3, #5
 8005df4:	f200 80ac 	bhi.w	8005f50 <USBD_GetDescriptor+0x204>
 8005df8:	a201      	add	r2, pc, #4	; (adr r2, 8005e00 <USBD_GetDescriptor+0xb4>)
 8005dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfe:	bf00      	nop
 8005e00:	08005e19 	.word	0x08005e19
 8005e04:	08005e4d 	.word	0x08005e4d
 8005e08:	08005e81 	.word	0x08005e81
 8005e0c:	08005eb5 	.word	0x08005eb5
 8005e10:	08005ee9 	.word	0x08005ee9
 8005e14:	08005f1d 	.word	0x08005f1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00b      	beq.n	8005e3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	7c12      	ldrb	r2, [r2, #16]
 8005e30:	f107 0108 	add.w	r1, r7, #8
 8005e34:	4610      	mov	r0, r2
 8005e36:	4798      	blx	r3
 8005e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e3a:	e091      	b.n	8005f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e3c:	6839      	ldr	r1, [r7, #0]
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 facb 	bl	80063da <USBD_CtlError>
            err++;
 8005e44:	7afb      	ldrb	r3, [r7, #11]
 8005e46:	3301      	adds	r3, #1
 8005e48:	72fb      	strb	r3, [r7, #11]
          break;
 8005e4a:	e089      	b.n	8005f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00b      	beq.n	8005e70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	7c12      	ldrb	r2, [r2, #16]
 8005e64:	f107 0108 	add.w	r1, r7, #8
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4798      	blx	r3
 8005e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e6e:	e077      	b.n	8005f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fab1 	bl	80063da <USBD_CtlError>
            err++;
 8005e78:	7afb      	ldrb	r3, [r7, #11]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e7e:	e06f      	b.n	8005f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00b      	beq.n	8005ea4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	7c12      	ldrb	r2, [r2, #16]
 8005e98:	f107 0108 	add.w	r1, r7, #8
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4798      	blx	r3
 8005ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ea2:	e05d      	b.n	8005f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fa97 	bl	80063da <USBD_CtlError>
            err++;
 8005eac:	7afb      	ldrb	r3, [r7, #11]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8005eb2:	e055      	b.n	8005f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00b      	beq.n	8005ed8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	7c12      	ldrb	r2, [r2, #16]
 8005ecc:	f107 0108 	add.w	r1, r7, #8
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	4798      	blx	r3
 8005ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ed6:	e043      	b.n	8005f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ed8:	6839      	ldr	r1, [r7, #0]
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fa7d 	bl	80063da <USBD_CtlError>
            err++;
 8005ee0:	7afb      	ldrb	r3, [r7, #11]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8005ee6:	e03b      	b.n	8005f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00b      	beq.n	8005f0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	7c12      	ldrb	r2, [r2, #16]
 8005f00:	f107 0108 	add.w	r1, r7, #8
 8005f04:	4610      	mov	r0, r2
 8005f06:	4798      	blx	r3
 8005f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f0a:	e029      	b.n	8005f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f0c:	6839      	ldr	r1, [r7, #0]
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fa63 	bl	80063da <USBD_CtlError>
            err++;
 8005f14:	7afb      	ldrb	r3, [r7, #11]
 8005f16:	3301      	adds	r3, #1
 8005f18:	72fb      	strb	r3, [r7, #11]
          break;
 8005f1a:	e021      	b.n	8005f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00b      	beq.n	8005f40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	7c12      	ldrb	r2, [r2, #16]
 8005f34:	f107 0108 	add.w	r1, r7, #8
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4798      	blx	r3
 8005f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f3e:	e00f      	b.n	8005f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa49 	bl	80063da <USBD_CtlError>
            err++;
 8005f48:	7afb      	ldrb	r3, [r7, #11]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8005f4e:	e007      	b.n	8005f60 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005f50:	6839      	ldr	r1, [r7, #0]
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fa41 	bl	80063da <USBD_CtlError>
          err++;
 8005f58:	7afb      	ldrb	r3, [r7, #11]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005f5e:	bf00      	nop
      }
      break;
 8005f60:	e037      	b.n	8005fd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	7c1b      	ldrb	r3, [r3, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d109      	bne.n	8005f7e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f72:	f107 0208 	add.w	r2, r7, #8
 8005f76:	4610      	mov	r0, r2
 8005f78:	4798      	blx	r3
 8005f7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f7c:	e029      	b.n	8005fd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fa2a 	bl	80063da <USBD_CtlError>
        err++;
 8005f86:	7afb      	ldrb	r3, [r7, #11]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	72fb      	strb	r3, [r7, #11]
      break;
 8005f8c:	e021      	b.n	8005fd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	7c1b      	ldrb	r3, [r3, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10d      	bne.n	8005fb2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9e:	f107 0208 	add.w	r2, r7, #8
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	4798      	blx	r3
 8005fa6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	3301      	adds	r3, #1
 8005fac:	2207      	movs	r2, #7
 8005fae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005fb0:	e00f      	b.n	8005fd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fa10 	bl	80063da <USBD_CtlError>
        err++;
 8005fba:	7afb      	ldrb	r3, [r7, #11]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	72fb      	strb	r3, [r7, #11]
      break;
 8005fc0:	e007      	b.n	8005fd2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fa08 	bl	80063da <USBD_CtlError>
      err++;
 8005fca:	7afb      	ldrb	r3, [r7, #11]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	72fb      	strb	r3, [r7, #11]
      break;
 8005fd0:	bf00      	nop
  }

  if (err != 0U)
 8005fd2:	7afb      	ldrb	r3, [r7, #11]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d11e      	bne.n	8006016 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	88db      	ldrh	r3, [r3, #6]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d016      	beq.n	800600e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005fe0:	893b      	ldrh	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00e      	beq.n	8006004 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	88da      	ldrh	r2, [r3, #6]
 8005fea:	893b      	ldrh	r3, [r7, #8]
 8005fec:	4293      	cmp	r3, r2
 8005fee:	bf28      	it	cs
 8005ff0:	4613      	movcs	r3, r2
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ff6:	893b      	ldrh	r3, [r7, #8]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	68f9      	ldr	r1, [r7, #12]
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fa5d 	bl	80064bc <USBD_CtlSendData>
 8006002:	e009      	b.n	8006018 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006004:	6839      	ldr	r1, [r7, #0]
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f9e7 	bl	80063da <USBD_CtlError>
 800600c:	e004      	b.n	8006018 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 faae 	bl	8006570 <USBD_CtlSendStatus>
 8006014:	e000      	b.n	8006018 <USBD_GetDescriptor+0x2cc>
    return;
 8006016:	bf00      	nop
  }
}
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop

08006020 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	889b      	ldrh	r3, [r3, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d131      	bne.n	8006096 <USBD_SetAddress+0x76>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	88db      	ldrh	r3, [r3, #6]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d12d      	bne.n	8006096 <USBD_SetAddress+0x76>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	885b      	ldrh	r3, [r3, #2]
 800603e:	2b7f      	cmp	r3, #127	; 0x7f
 8006040:	d829      	bhi.n	8006096 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	885b      	ldrh	r3, [r3, #2]
 8006046:	b2db      	uxtb	r3, r3
 8006048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800604c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b03      	cmp	r3, #3
 8006058:	d104      	bne.n	8006064 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800605a:	6839      	ldr	r1, [r7, #0]
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f9bc 	bl	80063da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006062:	e01d      	b.n	80060a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	7bfa      	ldrb	r2, [r7, #15]
 8006068:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800606c:	7bfb      	ldrb	r3, [r7, #15]
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fed5 	bl	8006e20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fa7a 	bl	8006570 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800607c:	7bfb      	ldrb	r3, [r7, #15]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d004      	beq.n	800608c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2202      	movs	r2, #2
 8006086:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800608a:	e009      	b.n	80060a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006094:	e004      	b.n	80060a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006096:	6839      	ldr	r1, [r7, #0]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f99e 	bl	80063da <USBD_CtlError>
  }
}
 800609e:	bf00      	nop
 80060a0:	bf00      	nop
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	885b      	ldrh	r3, [r3, #2]
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	4b4e      	ldr	r3, [pc, #312]	; (80061f8 <USBD_SetConfig+0x150>)
 80060be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80060c0:	4b4d      	ldr	r3, [pc, #308]	; (80061f8 <USBD_SetConfig+0x150>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d905      	bls.n	80060d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f985 	bl	80063da <USBD_CtlError>
    return USBD_FAIL;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e08c      	b.n	80061ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d002      	beq.n	80060e6 <USBD_SetConfig+0x3e>
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d029      	beq.n	8006138 <USBD_SetConfig+0x90>
 80060e4:	e075      	b.n	80061d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80060e6:	4b44      	ldr	r3, [pc, #272]	; (80061f8 <USBD_SetConfig+0x150>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d020      	beq.n	8006130 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80060ee:	4b42      	ldr	r3, [pc, #264]	; (80061f8 <USBD_SetConfig+0x150>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80060f8:	4b3f      	ldr	r3, [pc, #252]	; (80061f8 <USBD_SetConfig+0x150>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7fe ffe7 	bl	80050d2 <USBD_SetClassConfig>
 8006104:	4603      	mov	r3, r0
 8006106:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d008      	beq.n	8006120 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f962 	bl	80063da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2202      	movs	r2, #2
 800611a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800611e:	e065      	b.n	80061ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fa25 	bl	8006570 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2203      	movs	r2, #3
 800612a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800612e:	e05d      	b.n	80061ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fa1d 	bl	8006570 <USBD_CtlSendStatus>
      break;
 8006136:	e059      	b.n	80061ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006138:	4b2f      	ldr	r3, [pc, #188]	; (80061f8 <USBD_SetConfig+0x150>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d112      	bne.n	8006166 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006148:	4b2b      	ldr	r3, [pc, #172]	; (80061f8 <USBD_SetConfig+0x150>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	461a      	mov	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006152:	4b29      	ldr	r3, [pc, #164]	; (80061f8 <USBD_SetConfig+0x150>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7fe ffd6 	bl	800510a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fa06 	bl	8006570 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006164:	e042      	b.n	80061ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006166:	4b24      	ldr	r3, [pc, #144]	; (80061f8 <USBD_SetConfig+0x150>)
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	461a      	mov	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	429a      	cmp	r2, r3
 8006172:	d02a      	beq.n	80061ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	b2db      	uxtb	r3, r3
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f7fe ffc4 	bl	800510a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006182:	4b1d      	ldr	r3, [pc, #116]	; (80061f8 <USBD_SetConfig+0x150>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800618c:	4b1a      	ldr	r3, [pc, #104]	; (80061f8 <USBD_SetConfig+0x150>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	4619      	mov	r1, r3
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7fe ff9d 	bl	80050d2 <USBD_SetClassConfig>
 8006198:	4603      	mov	r3, r0
 800619a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00f      	beq.n	80061c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80061a2:	6839      	ldr	r1, [r7, #0]
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f918 	bl	80063da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	4619      	mov	r1, r3
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fe ffa9 	bl	800510a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80061c0:	e014      	b.n	80061ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f9d4 	bl	8006570 <USBD_CtlSendStatus>
      break;
 80061c8:	e010      	b.n	80061ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f9d0 	bl	8006570 <USBD_CtlSendStatus>
      break;
 80061d0:	e00c      	b.n	80061ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f900 	bl	80063da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80061da:	4b07      	ldr	r3, [pc, #28]	; (80061f8 <USBD_SetConfig+0x150>)
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	4619      	mov	r1, r3
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7fe ff92 	bl	800510a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80061e6:	2303      	movs	r3, #3
 80061e8:	73fb      	strb	r3, [r7, #15]
      break;
 80061ea:	bf00      	nop
  }

  return ret;
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20000174 	.word	0x20000174

080061fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	88db      	ldrh	r3, [r3, #6]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d004      	beq.n	8006218 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f8e2 	bl	80063da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006216:	e023      	b.n	8006260 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	dc02      	bgt.n	800622a <USBD_GetConfig+0x2e>
 8006224:	2b00      	cmp	r3, #0
 8006226:	dc03      	bgt.n	8006230 <USBD_GetConfig+0x34>
 8006228:	e015      	b.n	8006256 <USBD_GetConfig+0x5a>
 800622a:	2b03      	cmp	r3, #3
 800622c:	d00b      	beq.n	8006246 <USBD_GetConfig+0x4a>
 800622e:	e012      	b.n	8006256 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3308      	adds	r3, #8
 800623a:	2201      	movs	r2, #1
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f93c 	bl	80064bc <USBD_CtlSendData>
        break;
 8006244:	e00c      	b.n	8006260 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	3304      	adds	r3, #4
 800624a:	2201      	movs	r2, #1
 800624c:	4619      	mov	r1, r3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f934 	bl	80064bc <USBD_CtlSendData>
        break;
 8006254:	e004      	b.n	8006260 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006256:	6839      	ldr	r1, [r7, #0]
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f8be 	bl	80063da <USBD_CtlError>
        break;
 800625e:	bf00      	nop
}
 8006260:	bf00      	nop
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006278:	b2db      	uxtb	r3, r3
 800627a:	3b01      	subs	r3, #1
 800627c:	2b02      	cmp	r3, #2
 800627e:	d81e      	bhi.n	80062be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	88db      	ldrh	r3, [r3, #6]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d004      	beq.n	8006292 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f8a5 	bl	80063da <USBD_CtlError>
        break;
 8006290:	e01a      	b.n	80062c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f043 0202 	orr.w	r2, r3, #2
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	330c      	adds	r3, #12
 80062b2:	2202      	movs	r2, #2
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f900 	bl	80064bc <USBD_CtlSendData>
      break;
 80062bc:	e004      	b.n	80062c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80062be:	6839      	ldr	r1, [r7, #0]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f88a 	bl	80063da <USBD_CtlError>
      break;
 80062c6:	bf00      	nop
  }
}
 80062c8:	bf00      	nop
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	885b      	ldrh	r3, [r3, #2]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d107      	bne.n	80062f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f940 	bl	8006570 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80062f0:	e013      	b.n	800631a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	885b      	ldrh	r3, [r3, #2]
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d10b      	bne.n	8006312 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	889b      	ldrh	r3, [r3, #4]
 80062fe:	0a1b      	lsrs	r3, r3, #8
 8006300:	b29b      	uxth	r3, r3
 8006302:	b2da      	uxtb	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f930 	bl	8006570 <USBD_CtlSendStatus>
}
 8006310:	e003      	b.n	800631a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f860 	bl	80063da <USBD_CtlError>
}
 800631a:	bf00      	nop
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b082      	sub	sp, #8
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006332:	b2db      	uxtb	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	2b02      	cmp	r3, #2
 8006338:	d80b      	bhi.n	8006352 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	885b      	ldrh	r3, [r3, #2]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d10c      	bne.n	800635c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f910 	bl	8006570 <USBD_CtlSendStatus>
      }
      break;
 8006350:	e004      	b.n	800635c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f840 	bl	80063da <USBD_CtlError>
      break;
 800635a:	e000      	b.n	800635e <USBD_ClrFeature+0x3c>
      break;
 800635c:	bf00      	nop
  }
}
 800635e:	bf00      	nop
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	781a      	ldrb	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3301      	adds	r3, #1
 8006380:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	781a      	ldrb	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3301      	adds	r3, #1
 800638e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f7ff fa41 	bl	8005818 <SWAPBYTE>
 8006396:	4603      	mov	r3, r0
 8006398:	461a      	mov	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3301      	adds	r3, #1
 80063a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3301      	adds	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f7ff fa34 	bl	8005818 <SWAPBYTE>
 80063b0:	4603      	mov	r3, r0
 80063b2:	461a      	mov	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3301      	adds	r3, #1
 80063bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3301      	adds	r3, #1
 80063c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f7ff fa27 	bl	8005818 <SWAPBYTE>
 80063ca:	4603      	mov	r3, r0
 80063cc:	461a      	mov	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	80da      	strh	r2, [r3, #6]
}
 80063d2:	bf00      	nop
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80063e4:	2180      	movs	r1, #128	; 0x80
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fcb0 	bl	8006d4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80063ec:	2100      	movs	r1, #0
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fcac 	bl	8006d4c <USBD_LL_StallEP>
}
 80063f4:	bf00      	nop
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d036      	beq.n	8006480 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006416:	6938      	ldr	r0, [r7, #16]
 8006418:	f000 f836 	bl	8006488 <USBD_GetLen>
 800641c:	4603      	mov	r3, r0
 800641e:	3301      	adds	r3, #1
 8006420:	b29b      	uxth	r3, r3
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	b29a      	uxth	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800642a:	7dfb      	ldrb	r3, [r7, #23]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	4413      	add	r3, r2
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	7812      	ldrb	r2, [r2, #0]
 8006434:	701a      	strb	r2, [r3, #0]
  idx++;
 8006436:	7dfb      	ldrb	r3, [r7, #23]
 8006438:	3301      	adds	r3, #1
 800643a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800643c:	7dfb      	ldrb	r3, [r7, #23]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	4413      	add	r3, r2
 8006442:	2203      	movs	r2, #3
 8006444:	701a      	strb	r2, [r3, #0]
  idx++;
 8006446:	7dfb      	ldrb	r3, [r7, #23]
 8006448:	3301      	adds	r3, #1
 800644a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800644c:	e013      	b.n	8006476 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800644e:	7dfb      	ldrb	r3, [r7, #23]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	4413      	add	r3, r2
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	7812      	ldrb	r2, [r2, #0]
 8006458:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	3301      	adds	r3, #1
 800645e:	613b      	str	r3, [r7, #16]
    idx++;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
 8006462:	3301      	adds	r3, #1
 8006464:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006466:	7dfb      	ldrb	r3, [r7, #23]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	4413      	add	r3, r2
 800646c:	2200      	movs	r2, #0
 800646e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006470:	7dfb      	ldrb	r3, [r7, #23]
 8006472:	3301      	adds	r3, #1
 8006474:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1e7      	bne.n	800644e <USBD_GetString+0x52>
 800647e:	e000      	b.n	8006482 <USBD_GetString+0x86>
    return;
 8006480:	bf00      	nop
  }
}
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006490:	2300      	movs	r3, #0
 8006492:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006498:	e005      	b.n	80064a6 <USBD_GetLen+0x1e>
  {
    len++;
 800649a:	7bfb      	ldrb	r3, [r7, #15]
 800649c:	3301      	adds	r3, #1
 800649e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	3301      	adds	r3, #1
 80064a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1f5      	bne.n	800649a <USBD_GetLen+0x12>
  }

  return len;
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	2100      	movs	r1, #0
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 fcbb 	bl	8006e5e <USBD_LL_Transmit>

  return USBD_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	60f8      	str	r0, [r7, #12]
 80064fa:	60b9      	str	r1, [r7, #8]
 80064fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	2100      	movs	r1, #0
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 fcaa 	bl	8006e5e <USBD_LL_Transmit>

  return USBD_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2203      	movs	r2, #3
 8006524:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	2100      	movs	r1, #0
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 fcae 	bl	8006ea0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b084      	sub	sp, #16
 8006552:	af00      	add	r7, sp, #0
 8006554:	60f8      	str	r0, [r7, #12]
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	2100      	movs	r1, #0
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 fc9d 	bl	8006ea0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2204      	movs	r2, #4
 800657c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006580:	2300      	movs	r3, #0
 8006582:	2200      	movs	r2, #0
 8006584:	2100      	movs	r1, #0
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fc69 	bl	8006e5e <USBD_LL_Transmit>

  return USBD_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b082      	sub	sp, #8
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2205      	movs	r2, #5
 80065a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065a6:	2300      	movs	r3, #0
 80065a8:	2200      	movs	r2, #0
 80065aa:	2100      	movs	r1, #0
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fc77 	bl	8006ea0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80065c0:	2200      	movs	r2, #0
 80065c2:	4912      	ldr	r1, [pc, #72]	; (800660c <MX_USB_DEVICE_Init+0x50>)
 80065c4:	4812      	ldr	r0, [pc, #72]	; (8006610 <MX_USB_DEVICE_Init+0x54>)
 80065c6:	f7fe fd07 	bl	8004fd8 <USBD_Init>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80065d0:	f7fa f89c 	bl	800070c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80065d4:	490f      	ldr	r1, [pc, #60]	; (8006614 <MX_USB_DEVICE_Init+0x58>)
 80065d6:	480e      	ldr	r0, [pc, #56]	; (8006610 <MX_USB_DEVICE_Init+0x54>)
 80065d8:	f7fe fd2e 	bl	8005038 <USBD_RegisterClass>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80065e2:	f7fa f893 	bl	800070c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80065e6:	490c      	ldr	r1, [pc, #48]	; (8006618 <MX_USB_DEVICE_Init+0x5c>)
 80065e8:	4809      	ldr	r0, [pc, #36]	; (8006610 <MX_USB_DEVICE_Init+0x54>)
 80065ea:	f7fe fc65 	bl	8004eb8 <USBD_CDC_RegisterInterface>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80065f4:	f7fa f88a 	bl	800070c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80065f8:	4805      	ldr	r0, [pc, #20]	; (8006610 <MX_USB_DEVICE_Init+0x54>)
 80065fa:	f7fe fd53 	bl	80050a4 <USBD_Start>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006604:	f7fa f882 	bl	800070c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006608:	bf00      	nop
 800660a:	bd80      	pop	{r7, pc}
 800660c:	200000ac 	.word	0x200000ac
 8006610:	20000178 	.word	0x20000178
 8006614:	20000018 	.word	0x20000018
 8006618:	20000098 	.word	0x20000098

0800661c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006620:	2200      	movs	r2, #0
 8006622:	4905      	ldr	r1, [pc, #20]	; (8006638 <CDC_Init_FS+0x1c>)
 8006624:	4805      	ldr	r0, [pc, #20]	; (800663c <CDC_Init_FS+0x20>)
 8006626:	f7fe fc61 	bl	8004eec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800662a:	4905      	ldr	r1, [pc, #20]	; (8006640 <CDC_Init_FS+0x24>)
 800662c:	4803      	ldr	r0, [pc, #12]	; (800663c <CDC_Init_FS+0x20>)
 800662e:	f7fe fc7f 	bl	8004f30 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006632:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006634:	4618      	mov	r0, r3
 8006636:	bd80      	pop	{r7, pc}
 8006638:	20000854 	.word	0x20000854
 800663c:	20000178 	.word	0x20000178
 8006640:	20000454 	.word	0x20000454

08006644 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006648:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800664a:	4618      	mov	r0, r3
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	4603      	mov	r3, r0
 800665c:	6039      	str	r1, [r7, #0]
 800665e:	71fb      	strb	r3, [r7, #7]
 8006660:	4613      	mov	r3, r2
 8006662:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006664:	79fb      	ldrb	r3, [r7, #7]
 8006666:	2b23      	cmp	r3, #35	; 0x23
 8006668:	d84a      	bhi.n	8006700 <CDC_Control_FS+0xac>
 800666a:	a201      	add	r2, pc, #4	; (adr r2, 8006670 <CDC_Control_FS+0x1c>)
 800666c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006670:	08006701 	.word	0x08006701
 8006674:	08006701 	.word	0x08006701
 8006678:	08006701 	.word	0x08006701
 800667c:	08006701 	.word	0x08006701
 8006680:	08006701 	.word	0x08006701
 8006684:	08006701 	.word	0x08006701
 8006688:	08006701 	.word	0x08006701
 800668c:	08006701 	.word	0x08006701
 8006690:	08006701 	.word	0x08006701
 8006694:	08006701 	.word	0x08006701
 8006698:	08006701 	.word	0x08006701
 800669c:	08006701 	.word	0x08006701
 80066a0:	08006701 	.word	0x08006701
 80066a4:	08006701 	.word	0x08006701
 80066a8:	08006701 	.word	0x08006701
 80066ac:	08006701 	.word	0x08006701
 80066b0:	08006701 	.word	0x08006701
 80066b4:	08006701 	.word	0x08006701
 80066b8:	08006701 	.word	0x08006701
 80066bc:	08006701 	.word	0x08006701
 80066c0:	08006701 	.word	0x08006701
 80066c4:	08006701 	.word	0x08006701
 80066c8:	08006701 	.word	0x08006701
 80066cc:	08006701 	.word	0x08006701
 80066d0:	08006701 	.word	0x08006701
 80066d4:	08006701 	.word	0x08006701
 80066d8:	08006701 	.word	0x08006701
 80066dc:	08006701 	.word	0x08006701
 80066e0:	08006701 	.word	0x08006701
 80066e4:	08006701 	.word	0x08006701
 80066e8:	08006701 	.word	0x08006701
 80066ec:	08006701 	.word	0x08006701
 80066f0:	08006701 	.word	0x08006701
 80066f4:	08006701 	.word	0x08006701
 80066f8:	08006701 	.word	0x08006701
 80066fc:	08006701 	.word	0x08006701
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006700:	bf00      	nop
  }

  return (USBD_OK);
 8006702:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006704:	4618      	mov	r0, r3
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800671a:	6879      	ldr	r1, [r7, #4]
 800671c:	4805      	ldr	r0, [pc, #20]	; (8006734 <CDC_Receive_FS+0x24>)
 800671e:	f7fe fc07 	bl	8004f30 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006722:	4804      	ldr	r0, [pc, #16]	; (8006734 <CDC_Receive_FS+0x24>)
 8006724:	f7fe fc22 	bl	8004f6c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006728:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800672a:	4618      	mov	r0, r3
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	20000178 	.word	0x20000178

08006738 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	4613      	mov	r3, r2
 8006744:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800674a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800674e:	4618      	mov	r0, r3
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
	...

0800675c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	4603      	mov	r3, r0
 8006764:	6039      	str	r1, [r7, #0]
 8006766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	2212      	movs	r2, #18
 800676c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800676e:	4b03      	ldr	r3, [pc, #12]	; (800677c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006770:	4618      	mov	r0, r3
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	200000c8 	.word	0x200000c8

08006780 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	4603      	mov	r3, r0
 8006788:	6039      	str	r1, [r7, #0]
 800678a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2204      	movs	r2, #4
 8006790:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006792:	4b03      	ldr	r3, [pc, #12]	; (80067a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006794:	4618      	mov	r0, r3
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	200000dc 	.word	0x200000dc

080067a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	6039      	str	r1, [r7, #0]
 80067ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80067b0:	79fb      	ldrb	r3, [r7, #7]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d105      	bne.n	80067c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	4907      	ldr	r1, [pc, #28]	; (80067d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80067ba:	4808      	ldr	r0, [pc, #32]	; (80067dc <USBD_FS_ProductStrDescriptor+0x38>)
 80067bc:	f7ff fe1e 	bl	80063fc <USBD_GetString>
 80067c0:	e004      	b.n	80067cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	4904      	ldr	r1, [pc, #16]	; (80067d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80067c6:	4805      	ldr	r0, [pc, #20]	; (80067dc <USBD_FS_ProductStrDescriptor+0x38>)
 80067c8:	f7ff fe18 	bl	80063fc <USBD_GetString>
  }
  return USBD_StrDesc;
 80067cc:	4b02      	ldr	r3, [pc, #8]	; (80067d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20000c54 	.word	0x20000c54
 80067dc:	08007000 	.word	0x08007000

080067e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	4603      	mov	r3, r0
 80067e8:	6039      	str	r1, [r7, #0]
 80067ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	4904      	ldr	r1, [pc, #16]	; (8006800 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80067f0:	4804      	ldr	r0, [pc, #16]	; (8006804 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80067f2:	f7ff fe03 	bl	80063fc <USBD_GetString>
  return USBD_StrDesc;
 80067f6:	4b02      	ldr	r3, [pc, #8]	; (8006800 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20000c54 	.word	0x20000c54
 8006804:	08007014 	.word	0x08007014

08006808 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	4603      	mov	r3, r0
 8006810:	6039      	str	r1, [r7, #0]
 8006812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	221a      	movs	r2, #26
 8006818:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800681a:	f000 f843 	bl	80068a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800681e:	4b02      	ldr	r3, [pc, #8]	; (8006828 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	200000e0 	.word	0x200000e0

0800682c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	4603      	mov	r3, r0
 8006834:	6039      	str	r1, [r7, #0]
 8006836:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d105      	bne.n	800684a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	4907      	ldr	r1, [pc, #28]	; (8006860 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006842:	4808      	ldr	r0, [pc, #32]	; (8006864 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006844:	f7ff fdda 	bl	80063fc <USBD_GetString>
 8006848:	e004      	b.n	8006854 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	4904      	ldr	r1, [pc, #16]	; (8006860 <USBD_FS_ConfigStrDescriptor+0x34>)
 800684e:	4805      	ldr	r0, [pc, #20]	; (8006864 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006850:	f7ff fdd4 	bl	80063fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006854:	4b02      	ldr	r3, [pc, #8]	; (8006860 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20000c54 	.word	0x20000c54
 8006864:	08007028 	.word	0x08007028

08006868 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	4603      	mov	r3, r0
 8006870:	6039      	str	r1, [r7, #0]
 8006872:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006874:	79fb      	ldrb	r3, [r7, #7]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d105      	bne.n	8006886 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	4907      	ldr	r1, [pc, #28]	; (800689c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800687e:	4808      	ldr	r0, [pc, #32]	; (80068a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006880:	f7ff fdbc 	bl	80063fc <USBD_GetString>
 8006884:	e004      	b.n	8006890 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	4904      	ldr	r1, [pc, #16]	; (800689c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800688a:	4805      	ldr	r0, [pc, #20]	; (80068a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800688c:	f7ff fdb6 	bl	80063fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006890:	4b02      	ldr	r3, [pc, #8]	; (800689c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20000c54 	.word	0x20000c54
 80068a0:	08007034 	.word	0x08007034

080068a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80068aa:	4b0f      	ldr	r3, [pc, #60]	; (80068e8 <Get_SerialNum+0x44>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80068b0:	4b0e      	ldr	r3, [pc, #56]	; (80068ec <Get_SerialNum+0x48>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80068b6:	4b0e      	ldr	r3, [pc, #56]	; (80068f0 <Get_SerialNum+0x4c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4413      	add	r3, r2
 80068c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80068ca:	2208      	movs	r2, #8
 80068cc:	4909      	ldr	r1, [pc, #36]	; (80068f4 <Get_SerialNum+0x50>)
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 f814 	bl	80068fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80068d4:	2204      	movs	r2, #4
 80068d6:	4908      	ldr	r1, [pc, #32]	; (80068f8 <Get_SerialNum+0x54>)
 80068d8:	68b8      	ldr	r0, [r7, #8]
 80068da:	f000 f80f 	bl	80068fc <IntToUnicode>
  }
}
 80068de:	bf00      	nop
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	1fff7a10 	.word	0x1fff7a10
 80068ec:	1fff7a14 	.word	0x1fff7a14
 80068f0:	1fff7a18 	.word	0x1fff7a18
 80068f4:	200000e2 	.word	0x200000e2
 80068f8:	200000f2 	.word	0x200000f2

080068fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	4613      	mov	r3, r2
 8006908:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800690a:	2300      	movs	r3, #0
 800690c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800690e:	2300      	movs	r3, #0
 8006910:	75fb      	strb	r3, [r7, #23]
 8006912:	e027      	b.n	8006964 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	0f1b      	lsrs	r3, r3, #28
 8006918:	2b09      	cmp	r3, #9
 800691a:	d80b      	bhi.n	8006934 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	0f1b      	lsrs	r3, r3, #28
 8006920:	b2da      	uxtb	r2, r3
 8006922:	7dfb      	ldrb	r3, [r7, #23]
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	4619      	mov	r1, r3
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	440b      	add	r3, r1
 800692c:	3230      	adds	r2, #48	; 0x30
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	701a      	strb	r2, [r3, #0]
 8006932:	e00a      	b.n	800694a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	0f1b      	lsrs	r3, r3, #28
 8006938:	b2da      	uxtb	r2, r3
 800693a:	7dfb      	ldrb	r3, [r7, #23]
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	4619      	mov	r1, r3
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	440b      	add	r3, r1
 8006944:	3237      	adds	r2, #55	; 0x37
 8006946:	b2d2      	uxtb	r2, r2
 8006948:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	011b      	lsls	r3, r3, #4
 800694e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006950:	7dfb      	ldrb	r3, [r7, #23]
 8006952:	005b      	lsls	r3, r3, #1
 8006954:	3301      	adds	r3, #1
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	4413      	add	r3, r2
 800695a:	2200      	movs	r2, #0
 800695c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800695e:	7dfb      	ldrb	r3, [r7, #23]
 8006960:	3301      	adds	r3, #1
 8006962:	75fb      	strb	r3, [r7, #23]
 8006964:	7dfa      	ldrb	r2, [r7, #23]
 8006966:	79fb      	ldrb	r3, [r7, #7]
 8006968:	429a      	cmp	r2, r3
 800696a:	d3d3      	bcc.n	8006914 <IntToUnicode+0x18>
  }
}
 800696c:	bf00      	nop
 800696e:	bf00      	nop
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
	...

0800697c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08a      	sub	sp, #40	; 0x28
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006984:	f107 0314 	add.w	r3, r7, #20
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	605a      	str	r2, [r3, #4]
 800698e:	609a      	str	r2, [r3, #8]
 8006990:	60da      	str	r2, [r3, #12]
 8006992:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800699c:	d13a      	bne.n	8006a14 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800699e:	2300      	movs	r3, #0
 80069a0:	613b      	str	r3, [r7, #16]
 80069a2:	4b1e      	ldr	r3, [pc, #120]	; (8006a1c <HAL_PCD_MspInit+0xa0>)
 80069a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a6:	4a1d      	ldr	r2, [pc, #116]	; (8006a1c <HAL_PCD_MspInit+0xa0>)
 80069a8:	f043 0301 	orr.w	r3, r3, #1
 80069ac:	6313      	str	r3, [r2, #48]	; 0x30
 80069ae:	4b1b      	ldr	r3, [pc, #108]	; (8006a1c <HAL_PCD_MspInit+0xa0>)
 80069b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	613b      	str	r3, [r7, #16]
 80069b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80069ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80069be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069c0:	2302      	movs	r3, #2
 80069c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c4:	2300      	movs	r3, #0
 80069c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069c8:	2303      	movs	r3, #3
 80069ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80069cc:	230a      	movs	r3, #10
 80069ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069d0:	f107 0314 	add.w	r3, r7, #20
 80069d4:	4619      	mov	r1, r3
 80069d6:	4812      	ldr	r0, [pc, #72]	; (8006a20 <HAL_PCD_MspInit+0xa4>)
 80069d8:	f7fa f926 	bl	8000c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80069dc:	4b0f      	ldr	r3, [pc, #60]	; (8006a1c <HAL_PCD_MspInit+0xa0>)
 80069de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e0:	4a0e      	ldr	r2, [pc, #56]	; (8006a1c <HAL_PCD_MspInit+0xa0>)
 80069e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e6:	6353      	str	r3, [r2, #52]	; 0x34
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <HAL_PCD_MspInit+0xa0>)
 80069ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f0:	4a0a      	ldr	r2, [pc, #40]	; (8006a1c <HAL_PCD_MspInit+0xa0>)
 80069f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069f6:	6453      	str	r3, [r2, #68]	; 0x44
 80069f8:	4b08      	ldr	r3, [pc, #32]	; (8006a1c <HAL_PCD_MspInit+0xa0>)
 80069fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006a04:	2200      	movs	r2, #0
 8006a06:	2100      	movs	r1, #0
 8006a08:	2043      	movs	r0, #67	; 0x43
 8006a0a:	f7fa f8d6 	bl	8000bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006a0e:	2043      	movs	r0, #67	; 0x43
 8006a10:	f7fa f8ef 	bl	8000bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006a14:	bf00      	nop
 8006a16:	3728      	adds	r7, #40	; 0x28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	40020000 	.word	0x40020000

08006a24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	f7fe fb7f 	bl	800513e <USBD_LL_SetupStage>
}
 8006a40:	bf00      	nop
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006a5a:	78fa      	ldrb	r2, [r7, #3]
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	78fb      	ldrb	r3, [r7, #3]
 8006a70:	4619      	mov	r1, r3
 8006a72:	f7fe fbb9 	bl	80051e8 <USBD_LL_DataOutStage>
}
 8006a76:	bf00      	nop
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b082      	sub	sp, #8
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	460b      	mov	r3, r1
 8006a88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006a90:	78fa      	ldrb	r2, [r7, #3]
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	4613      	mov	r3, r2
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	4413      	add	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	440b      	add	r3, r1
 8006a9e:	334c      	adds	r3, #76	; 0x4c
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	78fb      	ldrb	r3, [r7, #3]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	f7fe fc52 	bl	800534e <USBD_LL_DataInStage>
}
 8006aaa:	bf00      	nop
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b082      	sub	sp, #8
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7fe fd86 	bl	80055d2 <USBD_LL_SOF>
}
 8006ac6:	bf00      	nop
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d001      	beq.n	8006ae6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006ae2:	f7f9 fe13 	bl	800070c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006aec:	7bfa      	ldrb	r2, [r7, #15]
 8006aee:	4611      	mov	r1, r2
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fe fd30 	bl	8005556 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7fe fcd8 	bl	80054b2 <USBD_LL_Reset>
}
 8006b02:	bf00      	nop
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fe fd2b 	bl	8005576 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	6812      	ldr	r2, [r2, #0]
 8006b2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b32:	f043 0301 	orr.w	r3, r3, #1
 8006b36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d005      	beq.n	8006b4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006b40:	4b04      	ldr	r3, [pc, #16]	; (8006b54 <HAL_PCD_SuspendCallback+0x48>)
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	4a03      	ldr	r2, [pc, #12]	; (8006b54 <HAL_PCD_SuspendCallback+0x48>)
 8006b46:	f043 0306 	orr.w	r3, r3, #6
 8006b4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006b4c:	bf00      	nop
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	e000ed00 	.word	0xe000ed00

08006b58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fe fd1b 	bl	80055a2 <USBD_LL_Resume>
}
 8006b6c:	bf00      	nop
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b86:	78fa      	ldrb	r2, [r7, #3]
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fe fd73 	bl	8005676 <USBD_LL_IsoOUTIncomplete>
}
 8006b90:	bf00      	nop
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006baa:	78fa      	ldrb	r2, [r7, #3]
 8006bac:	4611      	mov	r1, r2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fe fd2f 	bl	8005612 <USBD_LL_IsoINIncomplete>
}
 8006bb4:	bf00      	nop
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fe fd85 	bl	80056da <USBD_LL_DevConnected>
}
 8006bd0:	bf00      	nop
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe fd82 	bl	80056f0 <USBD_LL_DevDisconnected>
}
 8006bec:	bf00      	nop
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d13c      	bne.n	8006c7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006c04:	4a20      	ldr	r2, [pc, #128]	; (8006c88 <USBD_LL_Init+0x94>)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a1e      	ldr	r2, [pc, #120]	; (8006c88 <USBD_LL_Init+0x94>)
 8006c10:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006c14:	4b1c      	ldr	r3, [pc, #112]	; (8006c88 <USBD_LL_Init+0x94>)
 8006c16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006c1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006c1c:	4b1a      	ldr	r3, [pc, #104]	; (8006c88 <USBD_LL_Init+0x94>)
 8006c1e:	2204      	movs	r2, #4
 8006c20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006c22:	4b19      	ldr	r3, [pc, #100]	; (8006c88 <USBD_LL_Init+0x94>)
 8006c24:	2202      	movs	r2, #2
 8006c26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006c28:	4b17      	ldr	r3, [pc, #92]	; (8006c88 <USBD_LL_Init+0x94>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006c2e:	4b16      	ldr	r3, [pc, #88]	; (8006c88 <USBD_LL_Init+0x94>)
 8006c30:	2202      	movs	r2, #2
 8006c32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006c34:	4b14      	ldr	r3, [pc, #80]	; (8006c88 <USBD_LL_Init+0x94>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006c3a:	4b13      	ldr	r3, [pc, #76]	; (8006c88 <USBD_LL_Init+0x94>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006c40:	4b11      	ldr	r3, [pc, #68]	; (8006c88 <USBD_LL_Init+0x94>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006c46:	4b10      	ldr	r3, [pc, #64]	; (8006c88 <USBD_LL_Init+0x94>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006c4c:	4b0e      	ldr	r3, [pc, #56]	; (8006c88 <USBD_LL_Init+0x94>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006c52:	480d      	ldr	r0, [pc, #52]	; (8006c88 <USBD_LL_Init+0x94>)
 8006c54:	f7fa f96c 	bl	8000f30 <HAL_PCD_Init>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006c5e:	f7f9 fd55 	bl	800070c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006c62:	2180      	movs	r1, #128	; 0x80
 8006c64:	4808      	ldr	r0, [pc, #32]	; (8006c88 <USBD_LL_Init+0x94>)
 8006c66:	f7fb fbc4 	bl	80023f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006c6a:	2240      	movs	r2, #64	; 0x40
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	4806      	ldr	r0, [pc, #24]	; (8006c88 <USBD_LL_Init+0x94>)
 8006c70:	f7fb fb78 	bl	8002364 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006c74:	2280      	movs	r2, #128	; 0x80
 8006c76:	2101      	movs	r1, #1
 8006c78:	4803      	ldr	r0, [pc, #12]	; (8006c88 <USBD_LL_Init+0x94>)
 8006c7a:	f7fb fb73 	bl	8002364 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	20000e54 	.word	0x20000e54

08006c8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7fa fa61 	bl	800116a <HAL_PCD_Start>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 f942 	bl	8006f38 <USBD_Get_USB_Status>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	4608      	mov	r0, r1
 8006ccc:	4611      	mov	r1, r2
 8006cce:	461a      	mov	r2, r3
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	70fb      	strb	r3, [r7, #3]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	70bb      	strb	r3, [r7, #2]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006cea:	78bb      	ldrb	r3, [r7, #2]
 8006cec:	883a      	ldrh	r2, [r7, #0]
 8006cee:	78f9      	ldrb	r1, [r7, #3]
 8006cf0:	f7fa ff32 	bl	8001b58 <HAL_PCD_EP_Open>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 f91c 	bl	8006f38 <USBD_Get_USB_Status>
 8006d00:	4603      	mov	r3, r0
 8006d02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d04:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b084      	sub	sp, #16
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	460b      	mov	r3, r1
 8006d18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d28:	78fa      	ldrb	r2, [r7, #3]
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fa ff7b 	bl	8001c28 <HAL_PCD_EP_Close>
 8006d32:	4603      	mov	r3, r0
 8006d34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 f8fd 	bl	8006f38 <USBD_Get_USB_Status>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d42:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d66:	78fa      	ldrb	r2, [r7, #3]
 8006d68:	4611      	mov	r1, r2
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fb f853 	bl	8001e16 <HAL_PCD_EP_SetStall>
 8006d70:	4603      	mov	r3, r0
 8006d72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 f8de 	bl	8006f38 <USBD_Get_USB_Status>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d80:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b084      	sub	sp, #16
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	460b      	mov	r3, r1
 8006d94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006da4:	78fa      	ldrb	r2, [r7, #3]
 8006da6:	4611      	mov	r1, r2
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fb f898 	bl	8001ede <HAL_PCD_EP_ClrStall>
 8006dae:	4603      	mov	r3, r0
 8006db0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 f8bf 	bl	8006f38 <USBD_Get_USB_Status>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006dda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	da0b      	bge.n	8006dfc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dea:	68f9      	ldr	r1, [r7, #12]
 8006dec:	4613      	mov	r3, r2
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	440b      	add	r3, r1
 8006df6:	333e      	adds	r3, #62	; 0x3e
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	e00b      	b.n	8006e14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006dfc:	78fb      	ldrb	r3, [r7, #3]
 8006dfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e02:	68f9      	ldr	r1, [r7, #12]
 8006e04:	4613      	mov	r3, r2
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	4413      	add	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	440b      	add	r3, r1
 8006e0e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006e12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e3a:	78fa      	ldrb	r2, [r7, #3]
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7fa fe65 	bl	8001b0e <HAL_PCD_SetAddress>
 8006e44:	4603      	mov	r3, r0
 8006e46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 f874 	bl	8006f38 <USBD_Get_USB_Status>
 8006e50:	4603      	mov	r3, r0
 8006e52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e54:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b086      	sub	sp, #24
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	60f8      	str	r0, [r7, #12]
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	603b      	str	r3, [r7, #0]
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006e7c:	7af9      	ldrb	r1, [r7, #11]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	f7fa ff7e 	bl	8001d82 <HAL_PCD_EP_Transmit>
 8006e86:	4603      	mov	r3, r0
 8006e88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e8a:	7dfb      	ldrb	r3, [r7, #23]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 f853 	bl	8006f38 <USBD_Get_USB_Status>
 8006e92:	4603      	mov	r3, r0
 8006e94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006e96:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	607a      	str	r2, [r7, #4]
 8006eaa:	603b      	str	r3, [r7, #0]
 8006eac:	460b      	mov	r3, r1
 8006eae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006ebe:	7af9      	ldrb	r1, [r7, #11]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	f7fa fefa 	bl	8001cbc <HAL_PCD_EP_Receive>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 f832 	bl	8006f38 <USBD_Get_USB_Status>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006ed8:	7dbb      	ldrb	r3, [r7, #22]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b082      	sub	sp, #8
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	460b      	mov	r3, r1
 8006eec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ef4:	78fa      	ldrb	r2, [r7, #3]
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fa ff2a 	bl	8001d52 <HAL_PCD_EP_GetRxCount>
 8006efe:	4603      	mov	r3, r0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006f10:	4b03      	ldr	r3, [pc, #12]	; (8006f20 <USBD_static_malloc+0x18>)
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	20001360 	.word	0x20001360

08006f24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]

}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006f46:	79fb      	ldrb	r3, [r7, #7]
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d817      	bhi.n	8006f7c <USBD_Get_USB_Status+0x44>
 8006f4c:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <USBD_Get_USB_Status+0x1c>)
 8006f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f52:	bf00      	nop
 8006f54:	08006f65 	.word	0x08006f65
 8006f58:	08006f6b 	.word	0x08006f6b
 8006f5c:	08006f71 	.word	0x08006f71
 8006f60:	08006f77 	.word	0x08006f77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	73fb      	strb	r3, [r7, #15]
    break;
 8006f68:	e00b      	b.n	8006f82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	73fb      	strb	r3, [r7, #15]
    break;
 8006f6e:	e008      	b.n	8006f82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f70:	2301      	movs	r3, #1
 8006f72:	73fb      	strb	r3, [r7, #15]
    break;
 8006f74:	e005      	b.n	8006f82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f76:	2303      	movs	r3, #3
 8006f78:	73fb      	strb	r3, [r7, #15]
    break;
 8006f7a:	e002      	b.n	8006f82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8006f80:	bf00      	nop
  }
  return usb_status;
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <memset>:
 8006f90:	4402      	add	r2, r0
 8006f92:	4603      	mov	r3, r0
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d100      	bne.n	8006f9a <memset+0xa>
 8006f98:	4770      	bx	lr
 8006f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f9e:	e7f9      	b.n	8006f94 <memset+0x4>

08006fa0 <__libc_init_array>:
 8006fa0:	b570      	push	{r4, r5, r6, lr}
 8006fa2:	4d0d      	ldr	r5, [pc, #52]	; (8006fd8 <__libc_init_array+0x38>)
 8006fa4:	4c0d      	ldr	r4, [pc, #52]	; (8006fdc <__libc_init_array+0x3c>)
 8006fa6:	1b64      	subs	r4, r4, r5
 8006fa8:	10a4      	asrs	r4, r4, #2
 8006faa:	2600      	movs	r6, #0
 8006fac:	42a6      	cmp	r6, r4
 8006fae:	d109      	bne.n	8006fc4 <__libc_init_array+0x24>
 8006fb0:	4d0b      	ldr	r5, [pc, #44]	; (8006fe0 <__libc_init_array+0x40>)
 8006fb2:	4c0c      	ldr	r4, [pc, #48]	; (8006fe4 <__libc_init_array+0x44>)
 8006fb4:	f000 f818 	bl	8006fe8 <_init>
 8006fb8:	1b64      	subs	r4, r4, r5
 8006fba:	10a4      	asrs	r4, r4, #2
 8006fbc:	2600      	movs	r6, #0
 8006fbe:	42a6      	cmp	r6, r4
 8006fc0:	d105      	bne.n	8006fce <__libc_init_array+0x2e>
 8006fc2:	bd70      	pop	{r4, r5, r6, pc}
 8006fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fc8:	4798      	blx	r3
 8006fca:	3601      	adds	r6, #1
 8006fcc:	e7ee      	b.n	8006fac <__libc_init_array+0xc>
 8006fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fd2:	4798      	blx	r3
 8006fd4:	3601      	adds	r6, #1
 8006fd6:	e7f2      	b.n	8006fbe <__libc_init_array+0x1e>
 8006fd8:	0800705c 	.word	0x0800705c
 8006fdc:	0800705c 	.word	0x0800705c
 8006fe0:	0800705c 	.word	0x0800705c
 8006fe4:	08007060 	.word	0x08007060

08006fe8 <_init>:
 8006fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fea:	bf00      	nop
 8006fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fee:	bc08      	pop	{r3}
 8006ff0:	469e      	mov	lr, r3
 8006ff2:	4770      	bx	lr

08006ff4 <_fini>:
 8006ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff6:	bf00      	nop
 8006ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ffa:	bc08      	pop	{r3}
 8006ffc:	469e      	mov	lr, r3
 8006ffe:	4770      	bx	lr
